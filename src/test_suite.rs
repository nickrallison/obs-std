
use std::path::PathBuf;
use lazy_static::lazy_static;
use crate::linking::LinkerOptions;
use crate::vault::Vault;

lazy_static! {
	static ref TEST_SUITE_IGNORE: Vec<PathBuf> = vec![];
	static ref TEST_SUITE_LINKER_OPTIONS: LinkerOptions = LinkerOptions {
		link_share_tag: false,
		link_self: false
	};
	static ref TEST_SUITE_CLEAN_VAULT_PATH: PathBuf = PathBuf::from("test_vaults\\reference_clean");
	static ref TEST_SUITE_LINKED_VAULT_PATH: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
	static ref TEST_SUITE_REF_CLEAN_VAULT: Vault = Vault::new(TEST_SUITE_CLEAN_VAULT_PATH.clone(), TEST_SUITE_IGNORE.clone(), TEST_SUITE_LINKER_OPTIONS.clone());
	static ref TEST_SUITE_REF_LINKED_VAULT: Vault = Vault::new(TEST_SUITE_LINKED_VAULT_PATH.clone(), TEST_SUITE_IGNORE.clone(), TEST_SUITE_LINKER_OPTIONS.clone());
	static ref TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT: Vault = Vault::new(TEST_SUITE_LINKED_VAULT_PATH.clone(), TEST_SUITE_IGNORE.clone(), TEST_SUITE_LINKER_OPTIONS.clone()).link_all_files();
	static ref TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT: Vault = Vault::new(TEST_SUITE_CLEAN_VAULT_PATH.clone(), TEST_SUITE_IGNORE.clone(), TEST_SUITE_LINKER_OPTIONS.clone()).unlink_all_files();
}



#[cfg(test)]
mod test_suite {
	use std::fs;
	use std::path::PathBuf;
	use crate::md_file::MDFile;
	use crate::linking::LinkerOptions;
	use crate::test_suite::{TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT, TEST_SUITE_REF_CLEAN_VAULT, TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT, TEST_SUITE_REF_LINKED_VAULT};

	
    #[test]
	fn test_suite_stability_access_clipboard_history_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("access_clipboard_history.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_access_clipboard_history_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("access_clipboard_history.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_access_clipboard_history_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("access_clipboard_history.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_access_clipboard_history_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("access_clipboard_history.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_ac_circuits_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("ac_circuits.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_ac_circuits_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("ac_circuits.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_ac_circuits_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("ac_circuits.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_ac_circuits_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("ac_circuits.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_address_resolution_protocol_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("address_resolution_protocol.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_address_resolution_protocol_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("address_resolution_protocol.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_address_resolution_protocol_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("address_resolution_protocol.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_address_resolution_protocol_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("address_resolution_protocol.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_adjacency_matrix_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("adjacency_matrix.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_adjacency_matrix_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("adjacency_matrix.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_adjacency_matrix_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("adjacency_matrix.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_adjacency_matrix_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("adjacency_matrix.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_akra_bazzi_theorem_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("akra_bazzi_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_akra_bazzi_theorem_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("akra_bazzi_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_akra_bazzi_theorem_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("akra_bazzi_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_akra_bazzi_theorem_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("akra_bazzi_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_alan_turing_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("alan_turing.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_alan_turing_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("alan_turing.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_alan_turing_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("alan_turing.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_alan_turing_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("alan_turing.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_algorithm_specifications_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("algorithm_specifications.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_algorithm_specifications_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("algorithm_specifications.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_algorithm_specifications_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("algorithm_specifications.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_algorithm_specifications_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("algorithm_specifications.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_aliasing_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("aliasing.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_aliasing_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("aliasing.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_aliasing_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("aliasing.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_aliasing_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("aliasing.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_amdahl_s_law_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("amdahl_s_law.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_amdahl_s_law_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("amdahl_s_law.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_amdahl_s_law_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("amdahl_s_law.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_amdahl_s_law_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("amdahl_s_law.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_amortized_constant_time_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("amortized_constant_time.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_amortized_constant_time_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("amortized_constant_time.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_amortized_constant_time_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("amortized_constant_time.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_amortized_constant_time_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("amortized_constant_time.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_ampere_s_law_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("ampere_s_law.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_ampere_s_law_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("ampere_s_law.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_ampere_s_law_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("ampere_s_law.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_ampere_s_law_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("ampere_s_law.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_amplitude_modulation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("amplitude_modulation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_amplitude_modulation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("amplitude_modulation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_amplitude_modulation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("amplitude_modulation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_amplitude_modulation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("amplitude_modulation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_am_modulator_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("am_modulator.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_am_modulator_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("am_modulator.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_am_modulator_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("am_modulator.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_am_modulator_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("am_modulator.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_analog_to_digital_converters_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("analog_to_digital_converters.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_analog_to_digital_converters_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("analog_to_digital_converters.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_analog_to_digital_converters_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("analog_to_digital_converters.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_analog_to_digital_converters_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("analog_to_digital_converters.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_analyzing_algorithms_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("analyzing_algorithms.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_analyzing_algorithms_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("analyzing_algorithms.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_analyzing_algorithms_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("analyzing_algorithms.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_analyzing_algorithms_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("analyzing_algorithms.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_anisotropic_filtering_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("anisotropic_filtering.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_anisotropic_filtering_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("anisotropic_filtering.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_anisotropic_filtering_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("anisotropic_filtering.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_anisotropic_filtering_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("anisotropic_filtering.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_annuity_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("annuity.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_annuity_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("annuity.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_annuity_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("annuity.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_annuity_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("annuity.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_antisymmetric_relation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("antisymmetric_relation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_antisymmetric_relation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("antisymmetric_relation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_antisymmetric_relation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("antisymmetric_relation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_antisymmetric_relation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("antisymmetric_relation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_anti_aliasing_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("anti_aliasing.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_anti_aliasing_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("anti_aliasing.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_anti_aliasing_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("anti_aliasing.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_anti_aliasing_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("anti_aliasing.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_apb_register_programming_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("apb_register_programming.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_apb_register_programming_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("apb_register_programming.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_apb_register_programming_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("apb_register_programming.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_apb_register_programming_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("apb_register_programming.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_application_binary_interface_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("application_binary_interface.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_application_binary_interface_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("application_binary_interface.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_application_binary_interface_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("application_binary_interface.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_application_binary_interface_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("application_binary_interface.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_arc_smart_pointer_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("arc_smart_pointer.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_arc_smart_pointer_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("arc_smart_pointer.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_arc_smart_pointer_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("arc_smart_pointer.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_arc_smart_pointer_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("arc_smart_pointer.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_associativity_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("associativity.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_associativity_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("associativity.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_associativity_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("associativity.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_associativity_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("associativity.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_asymptotic_notation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("asymptotic_notation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_asymptotic_notation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("asymptotic_notation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_asymptotic_notation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("asymptotic_notation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_asymptotic_notation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("asymptotic_notation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_atomic_sentences_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("atomic_sentences.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_atomic_sentences_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("atomic_sentences.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_atomic_sentences_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("atomic_sentences.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_atomic_sentences_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("atomic_sentences.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_atomic_types_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("atomic_types.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_atomic_types_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("atomic_types.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_atomic_types_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("atomic_types.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_atomic_types_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("atomic_types.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_augustus_demorgan_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("augustus_demorgan.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_augustus_demorgan_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("augustus_demorgan.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_augustus_demorgan_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("augustus_demorgan.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_augustus_demorgan_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("augustus_demorgan.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_autocorrelation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("autocorrelation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_autocorrelation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("autocorrelation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_autocorrelation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("autocorrelation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_autocorrelation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("autocorrelation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_automata_theory_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("automata_theory.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_automata_theory_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("automata_theory.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_automata_theory_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("automata_theory.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_automata_theory_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("automata_theory.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_avl_tree_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("avl_tree.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_avl_tree_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("avl_tree.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_avl_tree_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("avl_tree.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_avl_tree_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("avl_tree.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_awk_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("awk.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_awk_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("awk.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_awk_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("awk.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_awk_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("awk.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_axiom_of_choice_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("axiom_of_choice.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_axiom_of_choice_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("axiom_of_choice.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_axiom_of_choice_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("axiom_of_choice.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_axiom_of_choice_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("axiom_of_choice.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_axiom_of_determinacy_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("axiom_of_determinacy.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_axiom_of_determinacy_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("axiom_of_determinacy.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_axiom_of_determinacy_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("axiom_of_determinacy.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_axiom_of_determinacy_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("axiom_of_determinacy.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_axiom_of_extensionality_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("axiom_of_extensionality.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_axiom_of_extensionality_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("axiom_of_extensionality.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_axiom_of_extensionality_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("axiom_of_extensionality.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_axiom_of_extensionality_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("axiom_of_extensionality.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_axiom_of_infinity_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("axiom_of_infinity.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_axiom_of_infinity_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("axiom_of_infinity.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_axiom_of_infinity_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("axiom_of_infinity.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_axiom_of_infinity_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("axiom_of_infinity.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_axiom_of_pairing_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("axiom_of_pairing.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_axiom_of_pairing_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("axiom_of_pairing.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_axiom_of_pairing_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("axiom_of_pairing.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_axiom_of_pairing_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("axiom_of_pairing.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_axiom_of_regularity_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("axiom_of_regularity.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_axiom_of_regularity_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("axiom_of_regularity.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_axiom_of_regularity_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("axiom_of_regularity.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_axiom_of_regularity_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("axiom_of_regularity.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_axiom_of_replacement_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("axiom_of_replacement.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_axiom_of_replacement_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("axiom_of_replacement.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_axiom_of_replacement_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("axiom_of_replacement.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_axiom_of_replacement_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("axiom_of_replacement.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_axiom_of_unrestricted_composition_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("axiom_of_unrestricted_composition.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_axiom_of_unrestricted_composition_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("axiom_of_unrestricted_composition.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_axiom_of_unrestricted_composition_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("axiom_of_unrestricted_composition.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_axiom_of_unrestricted_composition_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("axiom_of_unrestricted_composition.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_axiom_schema_of_specification_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("axiom_schema_of_specification.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_axiom_schema_of_specification_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("axiom_schema_of_specification.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_axiom_schema_of_specification_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("axiom_schema_of_specification.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_axiom_schema_of_specification_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("axiom_schema_of_specification.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_a_star_search_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("a_star_search.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_a_star_search_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("a_star_search.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_a_star_search_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("a_star_search.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_a_star_search_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("a_star_search.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_balanced_binary_tree_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("balanced_binary_tree.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_balanced_binary_tree_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("balanced_binary_tree.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_balanced_binary_tree_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("balanced_binary_tree.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_balanced_binary_tree_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("balanced_binary_tree.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_banach_tarski_paradox_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("banach_tarski_paradox.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_banach_tarski_paradox_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("banach_tarski_paradox.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_banach_tarski_paradox_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("banach_tarski_paradox.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_banach_tarski_paradox_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("banach_tarski_paradox.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_bayes_theorem_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("bayes_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_bayes_theorem_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("bayes_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_bayes_theorem_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bayes_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_bayes_theorem_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bayes_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_bellman_ford_algorithm_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("bellman_ford_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_bellman_ford_algorithm_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("bellman_ford_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_bellman_ford_algorithm_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bellman_ford_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_bellman_ford_algorithm_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bellman_ford_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_bessel_functions_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("bessel_functions.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_bessel_functions_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("bessel_functions.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_bessel_functions_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bessel_functions.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_bessel_functions_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bessel_functions.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_beta_distribution_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("beta_distribution.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_beta_distribution_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("beta_distribution.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_beta_distribution_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("beta_distribution.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_beta_distribution_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("beta_distribution.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_bezier_curves_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("bezier_curves.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_bezier_curves_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("bezier_curves.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_bezier_curves_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bezier_curves.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_bezier_curves_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bezier_curves.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_bicubic_interpolation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("bicubic_interpolation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_bicubic_interpolation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("bicubic_interpolation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_bicubic_interpolation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bicubic_interpolation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_bicubic_interpolation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bicubic_interpolation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_big_o_notation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("big_o_notation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_big_o_notation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("big_o_notation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_big_o_notation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("big_o_notation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_big_o_notation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("big_o_notation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_bijective_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("bijective.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_bijective_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("bijective.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_bijective_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bijective.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_bijective_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bijective.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_bilinear_interpolation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("bilinear_interpolation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_bilinear_interpolation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("bilinear_interpolation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_bilinear_interpolation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bilinear_interpolation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_bilinear_interpolation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bilinear_interpolation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_binary_coded_decimal_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("binary_coded_decimal.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_binary_coded_decimal_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("binary_coded_decimal.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_binary_coded_decimal_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_coded_decimal.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_binary_coded_decimal_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_coded_decimal.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_binary_heap_data_structure_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("binary_heap_data_structure.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_binary_heap_data_structure_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("binary_heap_data_structure.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_binary_heap_data_structure_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_heap_data_structure.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_binary_heap_data_structure_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_heap_data_structure.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_binary_operation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("binary_operation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_binary_operation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("binary_operation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_binary_operation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_operation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_binary_operation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_operation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_binary_relation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("binary_relation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_binary_relation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("binary_relation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_binary_relation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_relation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_binary_relation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_relation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_binary_representation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("binary_representation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_binary_representation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("binary_representation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_binary_representation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_representation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_binary_representation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_representation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_binary_search_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("binary_search.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_binary_search_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("binary_search.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_binary_search_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_search.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_binary_search_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_search.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_binary_search_tree_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("binary_search_tree.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_binary_search_tree_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("binary_search_tree.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_binary_search_tree_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_search_tree.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_binary_search_tree_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_search_tree.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_binary_search_tree_lowest_common_ancestor_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("binary_search_tree_lowest_common_ancestor.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_binary_search_tree_lowest_common_ancestor_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("binary_search_tree_lowest_common_ancestor.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_binary_search_tree_lowest_common_ancestor_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_search_tree_lowest_common_ancestor.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_binary_search_tree_lowest_common_ancestor_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_search_tree_lowest_common_ancestor.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_binary_serialization_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("binary_serialization.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_binary_serialization_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("binary_serialization.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_binary_serialization_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_serialization.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_binary_serialization_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_serialization.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_binary_string_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("binary_string.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_binary_string_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("binary_string.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_binary_string_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_string.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_binary_string_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_string.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_binary_to_canonical_signed_digit_conversion_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("binary_to_canonical_signed_digit_conversion.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_binary_to_canonical_signed_digit_conversion_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("binary_to_canonical_signed_digit_conversion.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_binary_to_canonical_signed_digit_conversion_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_to_canonical_signed_digit_conversion.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_binary_to_canonical_signed_digit_conversion_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_to_canonical_signed_digit_conversion.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_binary_tree_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("binary_tree.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_binary_tree_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("binary_tree.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_binary_tree_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_tree.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_binary_tree_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_tree.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_binary_tree_serialization_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("binary_tree_serialization.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_binary_tree_serialization_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("binary_tree_serialization.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_binary_tree_serialization_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_tree_serialization.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_binary_tree_serialization_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binary_tree_serialization.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_binet_s_formula_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("binet_s_formula.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_binet_s_formula_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("binet_s_formula.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_binet_s_formula_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binet_s_formula.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_binet_s_formula_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binet_s_formula.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_binomial_distribution_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("binomial_distribution.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_binomial_distribution_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("binomial_distribution.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_binomial_distribution_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binomial_distribution.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_binomial_distribution_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("binomial_distribution.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_bipartite_graph_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("bipartite_graph.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_bipartite_graph_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("bipartite_graph.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_bipartite_graph_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bipartite_graph.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_bipartite_graph_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bipartite_graph.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_bjt_transistor_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("bjt_transistor.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_bjt_transistor_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("bjt_transistor.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_bjt_transistor_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bjt_transistor.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_bjt_transistor_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bjt_transistor.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_bode_plot_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("bode_plot.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_bode_plot_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("bode_plot.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_bode_plot_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bode_plot.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_bode_plot_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bode_plot.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_bogo_sort_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("bogo_sort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_bogo_sort_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("bogo_sort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_bogo_sort_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bogo_sort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_bogo_sort_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bogo_sort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_boid_simulation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("boid_simulation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_boid_simulation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("boid_simulation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_boid_simulation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("boid_simulation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_boid_simulation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("boid_simulation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_boolean_algebra_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("boolean_algebra.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_boolean_algebra_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("boolean_algebra.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_boolean_algebra_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("boolean_algebra.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_boolean_algebra_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("boolean_algebra.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_boolean_satisfiability_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("boolean_satisfiability.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_boolean_satisfiability_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("boolean_satisfiability.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_boolean_satisfiability_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("boolean_satisfiability.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_boolean_satisfiability_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("boolean_satisfiability.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_borrow_checker_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("borrow_checker.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_borrow_checker_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("borrow_checker.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_borrow_checker_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("borrow_checker.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_borrow_checker_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("borrow_checker.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_box_smart_pointer_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("box_smart_pointer.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_box_smart_pointer_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("box_smart_pointer.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_box_smart_pointer_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("box_smart_pointer.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_box_smart_pointer_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("box_smart_pointer.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_bubble_sort_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("bubble_sort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_bubble_sort_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("bubble_sort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_bubble_sort_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bubble_sort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_bubble_sort_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bubble_sort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_bucket_sort_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("bucket_sort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_bucket_sort_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("bucket_sort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_bucket_sort_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bucket_sort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_bucket_sort_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("bucket_sort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_building_rust_with_cmake_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("building_rust_with_cmake.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_building_rust_with_cmake_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("building_rust_with_cmake.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_building_rust_with_cmake_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("building_rust_with_cmake.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_building_rust_with_cmake_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("building_rust_with_cmake.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_build_a_c_dll_with_rust_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("build_a_c_dll_with_rust.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_build_a_c_dll_with_rust_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("build_a_c_dll_with_rust.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_build_a_c_dll_with_rust_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("build_a_c_dll_with_rust.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_build_a_c_dll_with_rust_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("build_a_c_dll_with_rust.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_busy_beaver_game_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("busy_beaver_game.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_busy_beaver_game_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("busy_beaver_game.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_busy_beaver_game_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("busy_beaver_game.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_busy_beaver_game_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("busy_beaver_game.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_busy_beaver_series_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("busy_beaver_series.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_busy_beaver_series_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("busy_beaver_series.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_busy_beaver_series_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("busy_beaver_series.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_busy_beaver_series_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("busy_beaver_series.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_cache_invalidation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("cache_invalidation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_cache_invalidation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("cache_invalidation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_cache_invalidation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cache_invalidation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_cache_invalidation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cache_invalidation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_caching_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("caching.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_caching_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("caching.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_caching_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("caching.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_caching_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("caching.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_call_option_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("call_option.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_call_option_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("call_option.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_call_option_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("call_option.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_call_option_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("call_option.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_canonical_signed_digit_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("canonical_signed_digit.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_canonical_signed_digit_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("canonical_signed_digit.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_canonical_signed_digit_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("canonical_signed_digit.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_canonical_signed_digit_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("canonical_signed_digit.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_cardinality_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("cardinality.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_cardinality_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("cardinality.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_cardinality_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cardinality.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_cardinality_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cardinality.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_carson_s_rule_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("carson_s_rule.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_carson_s_rule_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("carson_s_rule.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_carson_s_rule_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("carson_s_rule.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_carson_s_rule_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("carson_s_rule.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_cartesian_product_of_sets_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("cartesian_product_of_sets.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_cartesian_product_of_sets_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("cartesian_product_of_sets.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_cartesian_product_of_sets_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cartesian_product_of_sets.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_cartesian_product_of_sets_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cartesian_product_of_sets.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_casuality_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("casuality.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_casuality_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("casuality.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_casuality_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("casuality.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_casuality_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("casuality.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_central_limit_theorem_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("central_limit_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_central_limit_theorem_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("central_limit_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_central_limit_theorem_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("central_limit_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_central_limit_theorem_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("central_limit_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_christofides_algorithm_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("christofides_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_christofides_algorithm_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("christofides_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_christofides_algorithm_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("christofides_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_christofides_algorithm_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("christofides_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_chromatic_aberration_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("chromatic_aberration.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_chromatic_aberration_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("chromatic_aberration.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_chromatic_aberration_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("chromatic_aberration.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_chromatic_aberration_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("chromatic_aberration.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_chroma_subsampling_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("chroma_subsampling.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_chroma_subsampling_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("chroma_subsampling.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_chroma_subsampling_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("chroma_subsampling.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_chroma_subsampling_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("chroma_subsampling.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_church_turing_thesis_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("church_turing_thesis.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_church_turing_thesis_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("church_turing_thesis.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_church_turing_thesis_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("church_turing_thesis.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_church_turing_thesis_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("church_turing_thesis.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_clock_domain_crossing_techniques_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("clock_domain_crossing_techniques.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_clock_domain_crossing_techniques_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("clock_domain_crossing_techniques.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_clock_domain_crossing_techniques_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("clock_domain_crossing_techniques.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_clock_domain_crossing_techniques_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("clock_domain_crossing_techniques.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_closure_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("closure.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_closure_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("closure.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_closure_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("closure.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_closure_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("closure.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_cmake_don_t_rebuild_custom_commands_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("cmake_don_t_rebuild_custom_commands.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_cmake_don_t_rebuild_custom_commands_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("cmake_don_t_rebuild_custom_commands.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_cmake_don_t_rebuild_custom_commands_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cmake_don_t_rebuild_custom_commands.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_cmake_don_t_rebuild_custom_commands_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cmake_don_t_rebuild_custom_commands.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_cmake_example_template_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("cmake_example_template.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_cmake_example_template_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("cmake_example_template.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_cmake_example_template_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cmake_example_template.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_cmake_example_template_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cmake_example_template.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_cmake_public_private_and_interface_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("cmake_public_private_and_interface.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_cmake_public_private_and_interface_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("cmake_public_private_and_interface.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_cmake_public_private_and_interface_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cmake_public_private_and_interface.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_cmake_public_private_and_interface_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cmake_public_private_and_interface.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_cmake_set_variable_to_command_output_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("cmake_set_variable_to_command_output.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_cmake_set_variable_to_command_output_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("cmake_set_variable_to_command_output.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_cmake_set_variable_to_command_output_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cmake_set_variable_to_command_output.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_cmake_set_variable_to_command_output_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cmake_set_variable_to_command_output.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_cmos_inverter_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("cmos_inverter.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_cmos_inverter_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("cmos_inverter.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_cmos_inverter_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cmos_inverter.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_cmos_inverter_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cmos_inverter.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_cmos_logic_gate_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("cmos_logic_gate.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_cmos_logic_gate_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("cmos_logic_gate.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_cmos_logic_gate_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cmos_logic_gate.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_cmos_logic_gate_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cmos_logic_gate.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_codec_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("codec.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_codec_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("codec.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_codec_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("codec.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_codec_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("codec.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_combinational_logic_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("combinational_logic.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_combinational_logic_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("combinational_logic.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_combinational_logic_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("combinational_logic.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_combinational_logic_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("combinational_logic.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_commutativity_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("commutativity.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_commutativity_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("commutativity.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_commutativity_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("commutativity.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_commutativity_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("commutativity.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_comparability_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("comparability.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_comparability_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("comparability.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_comparability_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("comparability.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_comparability_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("comparability.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_compiler_tokens_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("compiler_tokens.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_compiler_tokens_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("compiler_tokens.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_compiler_tokens_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("compiler_tokens.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_compiler_tokens_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("compiler_tokens.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_compiler_vs_linker_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("compiler_vs_linker.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_compiler_vs_linker_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("compiler_vs_linker.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_compiler_vs_linker_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("compiler_vs_linker.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_compiler_vs_linker_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("compiler_vs_linker.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_complementary_probability_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("complementary_probability.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_complementary_probability_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("complementary_probability.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_complementary_probability_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("complementary_probability.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_complementary_probability_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("complementary_probability.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_complete_graphs_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("complete_graphs.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_complete_graphs_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("complete_graphs.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_complete_graphs_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("complete_graphs.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_complete_graphs_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("complete_graphs.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_composition_of_a_number_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("composition_of_a_number.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_composition_of_a_number_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("composition_of_a_number.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_composition_of_a_number_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("composition_of_a_number.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_composition_of_a_number_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("composition_of_a_number.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_computability_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("computability.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_computability_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("computability.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_computability_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("computability.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_computability_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("computability.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_computer_folder_structure_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("computer_folder_structure.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_computer_folder_structure_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("computer_folder_structure.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_computer_folder_structure_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("computer_folder_structure.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_computer_folder_structure_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("computer_folder_structure.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_conditional_probability_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("conditional_probability.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_conditional_probability_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("conditional_probability.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_conditional_probability_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("conditional_probability.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_conditional_probability_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("conditional_probability.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_confidence_interval_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("confidence_interval.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_confidence_interval_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("confidence_interval.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_confidence_interval_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("confidence_interval.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_confidence_interval_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("confidence_interval.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_conjunctive_normal_form_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("conjunctive_normal_form.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_conjunctive_normal_form_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("conjunctive_normal_form.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_conjunctive_normal_form_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("conjunctive_normal_form.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_conjunctive_normal_form_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("conjunctive_normal_form.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_connected_graph_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("connected_graph.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_connected_graph_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("connected_graph.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_connected_graph_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("connected_graph.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_connected_graph_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("connected_graph.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_connections_at_companies_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("connections_at_companies.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_connections_at_companies_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("connections_at_companies.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_connections_at_companies_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("connections_at_companies.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_connections_at_companies_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("connections_at_companies.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_conservative_vector_field_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("conservative_vector_field.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_conservative_vector_field_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("conservative_vector_field.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_conservative_vector_field_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("conservative_vector_field.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_conservative_vector_field_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("conservative_vector_field.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_constant_folding_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("constant_folding.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_constant_folding_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("constant_folding.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_constant_folding_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("constant_folding.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_constant_folding_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("constant_folding.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_contamination_delay_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("contamination_delay.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_contamination_delay_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("contamination_delay.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_contamination_delay_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("contamination_delay.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_contamination_delay_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("contamination_delay.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_context_free_language_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("context_free_language.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_context_free_language_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("context_free_language.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_context_free_language_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("context_free_language.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_context_free_language_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("context_free_language.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_context_switch_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("context_switch.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_context_switch_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("context_switch.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_context_switch_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("context_switch.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_context_switch_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("context_switch.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_continuity_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("continuity.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_continuity_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("continuity.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_continuity_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("continuity.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_continuity_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("continuity.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_continuous_distribution_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("continuous_distribution.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_continuous_distribution_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("continuous_distribution.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_continuous_distribution_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("continuous_distribution.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_continuous_distribution_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("continuous_distribution.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_continuous_master_theorem_proof_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("continuous_master_theorem_proof.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_continuous_master_theorem_proof_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("continuous_master_theorem_proof.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_continuous_master_theorem_proof_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("continuous_master_theorem_proof.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_continuous_master_theorem_proof_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("continuous_master_theorem_proof.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_contradictions_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("contradictions.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_contradictions_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("contradictions.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_contradictions_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("contradictions.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_contradictions_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("contradictions.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_contrapositive_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("contrapositive.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_contrapositive_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("contrapositive.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_contrapositive_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("contrapositive.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_contrapositive_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("contrapositive.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_contrapositive_corollary_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("contrapositive_corollary.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_contrapositive_corollary_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("contrapositive_corollary.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_contrapositive_corollary_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("contrapositive_corollary.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_contrapositive_corollary_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("contrapositive_corollary.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_controllable_canonical_form_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("controllable_canonical_form.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_controllable_canonical_form_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("controllable_canonical_form.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_controllable_canonical_form_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("controllable_canonical_form.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_controllable_canonical_form_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("controllable_canonical_form.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_converse_logic_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("converse_logic.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_converse_logic_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("converse_logic.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_converse_logic_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("converse_logic.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_converse_logic_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("converse_logic.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_convex_hull_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("convex_hull.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_convex_hull_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("convex_hull.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_convex_hull_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("convex_hull.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_convex_hull_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("convex_hull.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_convolution_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("convolution.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_convolution_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("convolution.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_convolution_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("convolution.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_convolution_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("convolution.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_cook_s_theorem_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("cook_s_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_cook_s_theorem_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("cook_s_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_cook_s_theorem_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cook_s_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_cook_s_theorem_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cook_s_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_coprimality_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("coprimality.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_coprimality_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("coprimality.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_coprimality_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("coprimality.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_coprimality_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("coprimality.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_coreutils_rust_package_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("coreutils_rust_package.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_coreutils_rust_package_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("coreutils_rust_package.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_coreutils_rust_package_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("coreutils_rust_package.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_coreutils_rust_package_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("coreutils_rust_package.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_counting_sort_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("counting_sort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_counting_sort_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("counting_sort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_counting_sort_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("counting_sort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_counting_sort_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("counting_sort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_covariance_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("covariance.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_covariance_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("covariance.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_covariance_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("covariance.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_covariance_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("covariance.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_cpu_cores_vs_threads_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("cpu_cores_vs_threads.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_cpu_cores_vs_threads_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("cpu_cores_vs_threads.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_cpu_cores_vs_threads_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cpu_cores_vs_threads.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_cpu_cores_vs_threads_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cpu_cores_vs_threads.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_cron_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("cron.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_cron_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("cron.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_cron_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cron.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_cron_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cron.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_cross_product_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("cross_product.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_cross_product_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("cross_product.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_cross_product_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cross_product.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_cross_product_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cross_product.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_cumulative_distribution_function_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("cumulative_distribution_function.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_cumulative_distribution_function_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("cumulative_distribution_function.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_cumulative_distribution_function_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cumulative_distribution_function.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_cumulative_distribution_function_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("cumulative_distribution_function.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_curl_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("curl.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_curl_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("curl.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_curl_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("curl.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_curl_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("curl.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_current_density_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("current_density.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_current_density_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("current_density.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_current_density_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("current_density.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_current_density_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("current_density.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_c_extern_keyword_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("c_extern_keyword.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_c_extern_keyword_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("c_extern_keyword.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_c_extern_keyword_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("c_extern_keyword.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_c_extern_keyword_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("c_extern_keyword.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_c_hash_include_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("c_hash_include.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_c_hash_include_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("c_hash_include.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_c_hash_include_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("c_hash_include.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_c_hash_include_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("c_hash_include.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_c_libraries_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("c_libraries.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_c_libraries_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("c_libraries.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_c_libraries_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("c_libraries.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_c_libraries_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("c_libraries.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_c_name_mangling_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("c_name_mangling.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_c_name_mangling_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("c_name_mangling.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_c_name_mangling_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("c_name_mangling.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_c_name_mangling_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("c_name_mangling.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_c_virtual_keyword_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("c_virtual_keyword.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_c_virtual_keyword_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("c_virtual_keyword.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_c_virtual_keyword_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("c_virtual_keyword.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_c_virtual_keyword_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("c_virtual_keyword.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_declarative_macro_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("declarative_macro.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_declarative_macro_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("declarative_macro.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_declarative_macro_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("declarative_macro.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_declarative_macro_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("declarative_macro.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_deep_copy_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("deep_copy.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_deep_copy_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("deep_copy.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_deep_copy_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("deep_copy.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_deep_copy_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("deep_copy.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_delaunay_triangulation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("delaunay_triangulation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_delaunay_triangulation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("delaunay_triangulation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_delaunay_triangulation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("delaunay_triangulation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_delaunay_triangulation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("delaunay_triangulation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_demorgan_s_laws_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("demorgan_s_laws.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_demorgan_s_laws_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("demorgan_s_laws.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_demorgan_s_laws_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("demorgan_s_laws.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_demorgan_s_laws_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("demorgan_s_laws.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_determinants_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("determinants.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_determinants_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("determinants.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_determinants_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("determinants.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_determinants_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("determinants.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_detile_buffer_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("detile_buffer.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_detile_buffer_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("detile_buffer.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_detile_buffer_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("detile_buffer.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_detile_buffer_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("detile_buffer.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_de_casteljau_s_algorithm_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("de_casteljau_s_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_de_casteljau_s_algorithm_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("de_casteljau_s_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_de_casteljau_s_algorithm_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("de_casteljau_s_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_de_casteljau_s_algorithm_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("de_casteljau_s_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_diagonalization_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("diagonalization.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_diagonalization_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("diagonalization.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_diagonalization_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("diagonalization.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_diagonalization_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("diagonalization.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_difference_equations_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("difference_equations.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_difference_equations_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("difference_equations.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_difference_equations_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("difference_equations.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_difference_equations_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("difference_equations.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_difference_equation_solved_with_z_transforms_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("difference_equation_solved_with_z_transforms.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_difference_equation_solved_with_z_transforms_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("difference_equation_solved_with_z_transforms.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_difference_equation_solved_with_z_transforms_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("difference_equation_solved_with_z_transforms.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_difference_equation_solved_with_z_transforms_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("difference_equation_solved_with_z_transforms.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_differential_equations_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("differential_equations.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_differential_equations_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("differential_equations.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_differential_equations_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("differential_equations.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_differential_equations_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("differential_equations.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_diffie_hellman_key_exchange_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("diffie_hellman_key_exchange.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_diffie_hellman_key_exchange_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("diffie_hellman_key_exchange.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_diffie_hellman_key_exchange_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("diffie_hellman_key_exchange.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_diffie_hellman_key_exchange_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("diffie_hellman_key_exchange.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_digital_to_analog_converters_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("digital_to_analog_converters.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_digital_to_analog_converters_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("digital_to_analog_converters.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_digital_to_analog_converters_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("digital_to_analog_converters.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_digital_to_analog_converters_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("digital_to_analog_converters.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_dijkstra_s_algorithm_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("dijkstra_s_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_dijkstra_s_algorithm_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("dijkstra_s_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_dijkstra_s_algorithm_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("dijkstra_s_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_dijkstra_s_algorithm_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("dijkstra_s_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_dirac_delta_function_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("dirac_delta_function.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_dirac_delta_function_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("dirac_delta_function.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_dirac_delta_function_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("dirac_delta_function.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_dirac_delta_function_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("dirac_delta_function.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_directed_graph_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("directed_graph.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_directed_graph_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("directed_graph.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_directed_graph_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("directed_graph.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_directed_graph_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("directed_graph.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_disconnected_graph_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("disconnected_graph.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_disconnected_graph_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("disconnected_graph.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_disconnected_graph_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("disconnected_graph.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_disconnected_graph_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("disconnected_graph.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_discrete_fourier_transform_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("discrete_fourier_transform.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_discrete_fourier_transform_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("discrete_fourier_transform.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_discrete_fourier_transform_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("discrete_fourier_transform.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_discrete_fourier_transform_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("discrete_fourier_transform.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_discrete_logarithm_problem_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("discrete_logarithm_problem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_discrete_logarithm_problem_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("discrete_logarithm_problem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_discrete_logarithm_problem_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("discrete_logarithm_problem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_discrete_logarithm_problem_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("discrete_logarithm_problem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_discrete_wavelet_transform_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("discrete_wavelet_transform.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_discrete_wavelet_transform_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("discrete_wavelet_transform.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_discrete_wavelet_transform_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("discrete_wavelet_transform.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_discrete_wavelet_transform_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("discrete_wavelet_transform.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_disjoint_sets_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("disjoint_sets.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_disjoint_sets_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("disjoint_sets.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_disjoint_sets_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("disjoint_sets.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_disjoint_sets_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("disjoint_sets.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_disjunctive_normal_form_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("disjunctive_normal_form.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_disjunctive_normal_form_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("disjunctive_normal_form.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_disjunctive_normal_form_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("disjunctive_normal_form.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_disjunctive_normal_form_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("disjunctive_normal_form.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_distributivity_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("distributivity.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_distributivity_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("distributivity.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_distributivity_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("distributivity.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_distributivity_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("distributivity.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_divergence_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("divergence.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_divergence_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("divergence.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_divergence_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("divergence.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_divergence_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("divergence.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_divergence_theorem_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("divergence_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_divergence_theorem_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("divergence_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_divergence_theorem_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("divergence_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_divergence_theorem_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("divergence_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_divide_and_conquer_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("divide_and_conquer.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_divide_and_conquer_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("divide_and_conquer.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_divide_and_conquer_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("divide_and_conquer.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_divide_and_conquer_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("divide_and_conquer.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_docker_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("docker.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_docker_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("docker.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_docker_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("docker.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_docker_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("docker.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_docker_edit_start_script_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("docker_edit_start_script.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_docker_edit_start_script_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("docker_edit_start_script.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_docker_edit_start_script_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("docker_edit_start_script.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_docker_edit_start_script_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("docker_edit_start_script.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_domain_name_system_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("domain_name_system.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_domain_name_system_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("domain_name_system.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_domain_name_system_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("domain_name_system.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_domain_name_system_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("domain_name_system.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_dot_product_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("dot_product.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_dot_product_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("dot_product.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_dot_product_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("dot_product.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_dot_product_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("dot_product.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_double_dabble_algorithm_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("double_dabble_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_double_dabble_algorithm_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("double_dabble_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_double_dabble_algorithm_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("double_dabble_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_double_dabble_algorithm_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("double_dabble_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_driver_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("driver.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_driver_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("driver.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_driver_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("driver.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_driver_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("driver.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_dr_vant_contact_info_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("dr_vant_contact_info.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_dr_vant_contact_info_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("dr_vant_contact_info.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_dr_vant_contact_info_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("dr_vant_contact_info.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_dr_vant_contact_info_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("dr_vant_contact_info.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_dual_graph_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("dual_graph.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_dual_graph_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("dual_graph.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_dual_graph_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("dual_graph.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_dual_graph_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("dual_graph.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_dynamically_linked_library_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("dynamically_linked_library.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_dynamically_linked_library_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("dynamically_linked_library.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_dynamically_linked_library_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("dynamically_linked_library.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_dynamically_linked_library_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("dynamically_linked_library.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_dynamic_memory_allocation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("dynamic_memory_allocation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_dynamic_memory_allocation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("dynamic_memory_allocation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_dynamic_memory_allocation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("dynamic_memory_allocation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_dynamic_memory_allocation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("dynamic_memory_allocation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_dynamic_power_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("dynamic_power.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_dynamic_power_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("dynamic_power.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_dynamic_power_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("dynamic_power.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_dynamic_power_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("dynamic_power.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_dynamic_programming_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("dynamic_programming.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_dynamic_programming_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("dynamic_programming.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_dynamic_programming_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("dynamic_programming.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_dynamic_programming_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("dynamic_programming.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_d_flip_flop_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("d_flip_flop.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_d_flip_flop_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("d_flip_flop.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_d_flip_flop_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("d_flip_flop.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_d_flip_flop_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("d_flip_flop.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_eigendecomposition_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("eigendecomposition.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_eigendecomposition_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("eigendecomposition.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_eigendecomposition_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("eigendecomposition.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_eigendecomposition_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("eigendecomposition.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_eigenvalue_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("eigenvalue.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_eigenvalue_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("eigenvalue.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_eigenvalue_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("eigenvalue.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_eigenvalue_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("eigenvalue.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_eigenvectors_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("eigenvectors.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_eigenvectors_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("eigenvectors.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_eigenvectors_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("eigenvectors.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_eigenvectors_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("eigenvectors.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_electromagnetic_induction_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("electromagnetic_induction.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_electromagnetic_induction_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("electromagnetic_induction.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_electromagnetic_induction_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("electromagnetic_induction.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_electromagnetic_induction_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("electromagnetic_induction.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_elliptic_curves_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("elliptic_curves.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_elliptic_curves_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("elliptic_curves.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_elliptic_curves_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("elliptic_curves.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_elliptic_curves_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("elliptic_curves.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_elliptic_curve_cryptography_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("elliptic_curve_cryptography.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_elliptic_curve_cryptography_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("elliptic_curve_cryptography.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_elliptic_curve_cryptography_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("elliptic_curve_cryptography.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_elliptic_curve_cryptography_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("elliptic_curve_cryptography.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_embedding_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("embedding.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_embedding_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("embedding.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_embedding_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("embedding.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_embedding_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("embedding.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_empiricism_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("empiricism.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_empiricism_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("empiricism.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_empiricism_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("empiricism.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_empiricism_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("empiricism.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_endianness_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("endianness.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_endianness_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("endianness.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_endianness_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("endianness.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_endianness_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("endianness.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_entailment_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("entailment.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_entailment_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("entailment.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_entailment_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("entailment.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_entailment_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("entailment.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_environment_variables_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("environment_variables.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_environment_variables_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("environment_variables.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_environment_variables_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("environment_variables.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_environment_variables_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("environment_variables.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_epsilon_delta_definition_of_limits_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("epsilon_delta_definition_of_limits.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_epsilon_delta_definition_of_limits_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("epsilon_delta_definition_of_limits.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_epsilon_delta_definition_of_limits_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("epsilon_delta_definition_of_limits.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_epsilon_delta_definition_of_limits_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("epsilon_delta_definition_of_limits.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_epsilon_greedy_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("epsilon_greedy.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_epsilon_greedy_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("epsilon_greedy.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_epsilon_greedy_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("epsilon_greedy.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_epsilon_greedy_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("epsilon_greedy.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_equivalence_relation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("equivalence_relation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_equivalence_relation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("equivalence_relation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_equivalence_relation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("equivalence_relation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_equivalence_relation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("equivalence_relation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_esp32_udp_communication_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("esp32_udp_communication.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_esp32_udp_communication_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("esp32_udp_communication.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_esp32_udp_communication_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("esp32_udp_communication.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_esp32_udp_communication_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("esp32_udp_communication.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_euclid_s_algorithm_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("euclid_s_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_euclid_s_algorithm_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("euclid_s_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_euclid_s_algorithm_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("euclid_s_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_euclid_s_algorithm_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("euclid_s_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_eulerian_graphs_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("eulerian_graphs.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_eulerian_graphs_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("eulerian_graphs.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_eulerian_graphs_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("eulerian_graphs.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_eulerian_graphs_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("eulerian_graphs.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_euler_angles_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("euler_angles.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_euler_angles_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("euler_angles.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_euler_angles_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("euler_angles.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_euler_angles_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("euler_angles.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_euler_circuit_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("euler_circuit.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_euler_circuit_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("euler_circuit.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_euler_circuit_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("euler_circuit.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_euler_circuit_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("euler_circuit.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_euler_lagrange_equation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("euler_lagrange_equation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_euler_lagrange_equation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("euler_lagrange_equation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_euler_lagrange_equation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("euler_lagrange_equation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_euler_lagrange_equation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("euler_lagrange_equation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_euler_s_formula_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("euler_s_formula.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_euler_s_formula_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("euler_s_formula.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_euler_s_formula_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("euler_s_formula.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_euler_s_formula_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("euler_s_formula.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_euler_s_polyhedral_formula_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("euler_s_polyhedral_formula.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_euler_s_polyhedral_formula_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("euler_s_polyhedral_formula.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_euler_s_polyhedral_formula_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("euler_s_polyhedral_formula.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_euler_s_polyhedral_formula_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("euler_s_polyhedral_formula.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_euler_s_theorem_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("euler_s_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_euler_s_theorem_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("euler_s_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_euler_s_theorem_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("euler_s_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_euler_s_theorem_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("euler_s_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_euler_s_totient_function_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("euler_s_totient_function.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_euler_s_totient_function_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("euler_s_totient_function.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_euler_s_totient_function_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("euler_s_totient_function.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_euler_s_totient_function_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("euler_s_totient_function.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_euthyphro_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("euthyphro.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_euthyphro_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("euthyphro.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_euthyphro_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("euthyphro.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_euthyphro_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("euthyphro.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_expected_value_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("expected_value.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_expected_value_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("expected_value.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_expected_value_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("expected_value.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_expected_value_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("expected_value.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_extended_kalman_filter_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("extended_kalman_filter.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_extended_kalman_filter_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("extended_kalman_filter.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_extended_kalman_filter_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("extended_kalman_filter.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_extended_kalman_filter_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("extended_kalman_filter.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_factor_theorem_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("factor_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_factor_theorem_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("factor_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_factor_theorem_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("factor_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_factor_theorem_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("factor_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_fan_out_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("fan_out.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_fan_out_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("fan_out.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_fan_out_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("fan_out.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_fan_out_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("fan_out.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_faraday_s_law_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("faraday_s_law.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_faraday_s_law_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("faraday_s_law.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_faraday_s_law_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("faraday_s_law.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_faraday_s_law_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("faraday_s_law.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_fast_fourier_transform_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("fast_fourier_transform.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_fast_fourier_transform_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("fast_fourier_transform.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_fast_fourier_transform_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("fast_fourier_transform.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_fast_fourier_transform_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("fast_fourier_transform.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_fermat_s_factorization_method_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("fermat_s_factorization_method.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_fermat_s_factorization_method_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("fermat_s_factorization_method.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_fermat_s_factorization_method_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("fermat_s_factorization_method.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_fermat_s_factorization_method_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("fermat_s_factorization_method.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_fermat_s_little_theorem_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("fermat_s_little_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_fermat_s_little_theorem_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("fermat_s_little_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_fermat_s_little_theorem_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("fermat_s_little_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_fermat_s_little_theorem_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("fermat_s_little_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_fibonacci_heaps_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("fibonacci_heaps.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_fibonacci_heaps_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("fibonacci_heaps.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_fibonacci_heaps_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("fibonacci_heaps.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_fibonacci_heaps_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("fibonacci_heaps.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_fifos_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("fifos.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_fifos_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("fifos.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_fifos_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("fifos.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_fifos_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("fifos.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_final_value_theorem_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("final_value_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_final_value_theorem_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("final_value_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_final_value_theorem_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("final_value_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_final_value_theorem_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("final_value_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_finite_automata_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("finite_automata.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_finite_automata_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("finite_automata.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_finite_automata_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("finite_automata.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_finite_automata_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("finite_automata.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_finite_impulse_response_filter_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("finite_impulse_response_filter.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_finite_impulse_response_filter_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("finite_impulse_response_filter.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_finite_impulse_response_filter_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("finite_impulse_response_filter.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_finite_impulse_response_filter_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("finite_impulse_response_filter.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_finite_state_machines_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("finite_state_machines.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_finite_state_machines_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("finite_state_machines.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_finite_state_machines_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("finite_state_machines.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_finite_state_machines_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("finite_state_machines.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_first_order_logic_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("first_order_logic.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_first_order_logic_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("first_order_logic.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_first_order_logic_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("first_order_logic.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_first_order_logic_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("first_order_logic.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_fm_modulator_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("fm_modulator.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_fm_modulator_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("fm_modulator.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_fm_modulator_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("fm_modulator.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_fm_modulator_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("fm_modulator.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_formal_grammar_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("formal_grammar.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_formal_grammar_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("formal_grammar.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_formal_grammar_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("formal_grammar.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_formal_grammar_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("formal_grammar.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_formal_languages_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("formal_languages.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_formal_languages_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("formal_languages.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_formal_languages_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("formal_languages.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_formal_languages_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("formal_languages.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_formal_verification_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("formal_verification.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_formal_verification_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("formal_verification.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_formal_verification_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("formal_verification.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_formal_verification_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("formal_verification.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_fourier_series_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("fourier_series.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_fourier_series_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("fourier_series.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_fourier_series_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("fourier_series.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_fourier_series_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("fourier_series.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_fourier_transform_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("fourier_transform.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_fourier_transform_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("fourier_transform.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_fourier_transform_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("fourier_transform.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_fourier_transform_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("fourier_transform.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_four_color_theorem_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("four_color_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_four_color_theorem_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("four_color_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_four_color_theorem_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("four_color_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_four_color_theorem_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("four_color_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_fpga_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("fpga.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_fpga_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("fpga.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_fpga_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("fpga.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_fpga_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("fpga.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_fractional_knapsack_problem_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("fractional_knapsack_problem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_fractional_knapsack_problem_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("fractional_knapsack_problem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_fractional_knapsack_problem_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("fractional_knapsack_problem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_fractional_knapsack_problem_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("fractional_knapsack_problem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_frequency_modulation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("frequency_modulation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_frequency_modulation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("frequency_modulation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_frequency_modulation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("frequency_modulation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_frequency_modulation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("frequency_modulation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_frequency_response_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("frequency_response.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_frequency_response_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("frequency_response.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_frequency_response_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("frequency_response.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_frequency_response_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("frequency_response.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_full_state_feedback_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("full_state_feedback.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_full_state_feedback_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("full_state_feedback.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_full_state_feedback_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("full_state_feedback.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_full_state_feedback_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("full_state_feedback.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_functionally_complete_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("functionally_complete.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_functionally_complete_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("functionally_complete.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_functionally_complete_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("functionally_complete.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_functionally_complete_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("functionally_complete.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_function_signature_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("function_signature.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_function_signature_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("function_signature.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_function_signature_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("function_signature.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_function_signature_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("function_signature.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_fundamental_theorem_of_calculus_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("fundamental_theorem_of_calculus.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_fundamental_theorem_of_calculus_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("fundamental_theorem_of_calculus.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_fundamental_theorem_of_calculus_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("fundamental_theorem_of_calculus.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_fundamental_theorem_of_calculus_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("fundamental_theorem_of_calculus.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_gale_stewart_game_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("gale_stewart_game.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_gale_stewart_game_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("gale_stewart_game.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_gale_stewart_game_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("gale_stewart_game.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_gale_stewart_game_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("gale_stewart_game.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_gamma_encoding_and_decoding_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("gamma_encoding_and_decoding.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_gamma_encoding_and_decoding_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("gamma_encoding_and_decoding.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_gamma_encoding_and_decoding_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("gamma_encoding_and_decoding.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_gamma_encoding_and_decoding_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("gamma_encoding_and_decoding.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_garbage_collector_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("garbage_collector.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_garbage_collector_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("garbage_collector.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_garbage_collector_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("garbage_collector.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_garbage_collector_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("garbage_collector.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_gaussian_processes_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("gaussian_processes.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_gaussian_processes_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("gaussian_processes.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_gaussian_processes_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("gaussian_processes.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_gaussian_processes_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("gaussian_processes.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_gaussian_random_variable_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("gaussian_random_variable.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_gaussian_random_variable_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("gaussian_random_variable.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_gaussian_random_variable_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("gaussian_random_variable.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_gaussian_random_variable_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("gaussian_random_variable.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_gauss_jordan_elimination_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("gauss_jordan_elimination.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_gauss_jordan_elimination_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("gauss_jordan_elimination.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_gauss_jordan_elimination_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("gauss_jordan_elimination.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_gauss_jordan_elimination_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("gauss_jordan_elimination.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_gauss_law_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("gauss_law.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_gauss_law_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("gauss_law.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_gauss_law_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("gauss_law.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_gauss_law_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("gauss_law.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_generate_statement_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("generate_statement.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_generate_statement_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("generate_statement.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_generate_statement_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("generate_statement.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_generate_statement_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("generate_statement.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_generating_functions_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("generating_functions.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_generating_functions_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("generating_functions.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_generating_functions_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("generating_functions.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_generating_functions_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("generating_functions.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_geometric_distribution_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("geometric_distribution.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_geometric_distribution_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("geometric_distribution.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_geometric_distribution_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("geometric_distribution.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_geometric_distribution_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("geometric_distribution.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_geometric_product_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("geometric_product.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_geometric_product_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("geometric_product.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_geometric_product_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("geometric_product.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_geometric_product_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("geometric_product.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_gift_wrapping_algorithm_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("gift_wrapping_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_gift_wrapping_algorithm_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("gift_wrapping_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_gift_wrapping_algorithm_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("gift_wrapping_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_gift_wrapping_algorithm_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("gift_wrapping_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_gimbal_lock_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("gimbal_lock.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_gimbal_lock_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("gimbal_lock.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_gimbal_lock_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("gimbal_lock.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_gimbal_lock_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("gimbal_lock.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_git_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("git.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_git_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("git.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_git_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("git.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_git_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("git.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_git_add_remote_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("git_add_remote.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_git_add_remote_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("git_add_remote.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_git_add_remote_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("git_add_remote.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_git_add_remote_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("git_add_remote.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_git_commands_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("git_commands.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_git_commands_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("git_commands.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_git_commands_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("git_commands.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_git_commands_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("git_commands.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_gpu_sort_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("gpu_sort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_gpu_sort_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("gpu_sort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_gpu_sort_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("gpu_sort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_gpu_sort_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("gpu_sort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_gradient_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("gradient.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_gradient_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("gradient.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_gradient_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("gradient.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_gradient_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("gradient.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_graham_s_scan_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("graham_s_scan.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_graham_s_scan_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("graham_s_scan.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_graham_s_scan_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("graham_s_scan.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_graham_s_scan_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("graham_s_scan.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_graph_colouring_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("graph_colouring.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_graph_colouring_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("graph_colouring.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_graph_colouring_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("graph_colouring.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_graph_colouring_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("graph_colouring.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_graph_diameter_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("graph_diameter.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_graph_diameter_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("graph_diameter.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_graph_diameter_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("graph_diameter.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_graph_diameter_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("graph_diameter.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_graph_isomorphism_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("graph_isomorphism.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_graph_isomorphism_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("graph_isomorphism.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_graph_isomorphism_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("graph_isomorphism.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_graph_isomorphism_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("graph_isomorphism.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_greatest_common_divisor_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("greatest_common_divisor.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_greatest_common_divisor_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("greatest_common_divisor.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_greatest_common_divisor_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("greatest_common_divisor.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_greatest_common_divisor_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("greatest_common_divisor.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_green_s_theorem_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("green_s_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_green_s_theorem_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("green_s_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_green_s_theorem_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("green_s_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_green_s_theorem_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("green_s_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_grep_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("grep.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_grep_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("grep.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_grep_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("grep.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_grep_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("grep.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_group_group_theory_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("group_group_theory.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_group_group_theory_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("group_group_theory.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_group_group_theory_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("group_group_theory.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_group_group_theory_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("group_group_theory.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_gz_files_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("gz_files.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_gz_files_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("gz_files.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_gz_files_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("gz_files.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_gz_files_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("gz_files.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_h264_vs_h265_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("h264_vs_h265.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_h264_vs_h265_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("h264_vs_h265.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_h264_vs_h265_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("h264_vs_h265.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_h264_vs_h265_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("h264_vs_h265.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_hall_effect_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("hall_effect.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_hall_effect_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("hall_effect.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_hall_effect_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("hall_effect.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_hall_effect_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("hall_effect.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_hamiltonian_cycle_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("hamiltonian_cycle.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_hamiltonian_cycle_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("hamiltonian_cycle.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_hamiltonian_cycle_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("hamiltonian_cycle.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_hamiltonian_cycle_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("hamiltonian_cycle.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_handshake_lemma_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("handshake_lemma.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_handshake_lemma_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("handshake_lemma.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_handshake_lemma_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("handshake_lemma.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_handshake_lemma_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("handshake_lemma.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_hardlinks_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("hardlinks.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_hardlinks_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("hardlinks.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_hardlinks_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("hardlinks.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_hardlinks_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("hardlinks.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_hardlinks_vs_softlinks_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("hardlinks_vs_softlinks.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_hardlinks_vs_softlinks_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("hardlinks_vs_softlinks.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_hardlinks_vs_softlinks_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("hardlinks_vs_softlinks.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_hardlinks_vs_softlinks_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("hardlinks_vs_softlinks.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_hash_function_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("hash_function.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_hash_function_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("hash_function.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_hash_function_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("hash_function.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_hash_function_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("hash_function.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_hash_map_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("hash_map.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_hash_map_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("hash_map.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_hash_map_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("hash_map.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_hash_map_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("hash_map.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_hat_check_problem_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("hat_check_problem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_hat_check_problem_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("hat_check_problem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_hat_check_problem_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("hat_check_problem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_hat_check_problem_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("hat_check_problem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_heap_data_structure_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("heap_data_structure.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_heap_data_structure_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("heap_data_structure.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_heap_data_structure_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("heap_data_structure.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_heap_data_structure_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("heap_data_structure.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_heap_memory_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("heap_memory.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_heap_memory_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("heap_memory.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_heap_memory_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("heap_memory.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_heap_memory_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("heap_memory.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_heap_property_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("heap_property.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_heap_property_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("heap_property.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_heap_property_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("heap_property.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_heap_property_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("heap_property.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_heap_sort_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("heap_sort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_heap_sort_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("heap_sort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_heap_sort_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("heap_sort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_heap_sort_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("heap_sort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_heat_equation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("heat_equation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_heat_equation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("heat_equation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_heat_equation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("heat_equation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_heat_equation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("heat_equation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_held_karp_algorithm_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("held_karp_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_held_karp_algorithm_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("held_karp_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_held_karp_algorithm_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("held_karp_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_held_karp_algorithm_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("held_karp_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_hidden_markov_models_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("hidden_markov_models.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_hidden_markov_models_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("hidden_markov_models.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_hidden_markov_models_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("hidden_markov_models.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_hidden_markov_models_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("hidden_markov_models.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_high_impedance_logic_level_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("high_impedance_logic_level.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_high_impedance_logic_level_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("high_impedance_logic_level.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_high_impedance_logic_level_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("high_impedance_logic_level.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_high_impedance_logic_level_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("high_impedance_logic_level.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_hoare_logic_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("hoare_logic.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_hoare_logic_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("hoare_logic.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_hoare_logic_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("hoare_logic.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_hoare_logic_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("hoare_logic.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_homomorphism_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("homomorphism.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_homomorphism_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("homomorphism.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_homomorphism_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("homomorphism.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_homomorphism_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("homomorphism.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_horner_s_rule_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("horner_s_rule.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_horner_s_rule_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("horner_s_rule.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_horner_s_rule_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("horner_s_rule.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_horner_s_rule_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("horner_s_rule.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_how_does_an_operating_system_detect_an_out_of_range_segfault_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("how_does_an_operating_system_detect_an_out_of_range_segfault.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_how_does_an_operating_system_detect_an_out_of_range_segfault_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("how_does_an_operating_system_detect_an_out_of_range_segfault.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_how_does_an_operating_system_detect_an_out_of_range_segfault_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("how_does_an_operating_system_detect_an_out_of_range_segfault.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_how_does_an_operating_system_detect_an_out_of_range_segfault_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("how_does_an_operating_system_detect_an_out_of_range_segfault.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_how_to_change_environment_vars_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("how_to_change_environment_vars.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_how_to_change_environment_vars_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("how_to_change_environment_vars.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_how_to_change_environment_vars_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("how_to_change_environment_vars.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_how_to_change_environment_vars_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("how_to_change_environment_vars.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_how_to_remove_file_from_git_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("how_to_remove_file_from_git.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_how_to_remove_file_from_git_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("how_to_remove_file_from_git.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_how_to_remove_file_from_git_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("how_to_remove_file_from_git.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_how_to_remove_file_from_git_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("how_to_remove_file_from_git.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_how_to_use_perl_like_sed_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("how_to_use_perl_like_sed.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_how_to_use_perl_like_sed_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("how_to_use_perl_like_sed.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_how_to_use_perl_like_sed_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("how_to_use_perl_like_sed.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_how_to_use_perl_like_sed_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("how_to_use_perl_like_sed.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_huffman_coding_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("huffman_coding.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_huffman_coding_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("huffman_coding.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_huffman_coding_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("huffman_coding.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_huffman_coding_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("huffman_coding.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_hyperloglog_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("hyperloglog.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_hyperloglog_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("hyperloglog.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_hyperloglog_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("hyperloglog.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_hyperloglog_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("hyperloglog.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_hypothesis_testing_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("hypothesis_testing.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_hypothesis_testing_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("hypothesis_testing.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_hypothesis_testing_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("hypothesis_testing.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_hypothesis_testing_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("hypothesis_testing.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_identity_element_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("identity_element.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_identity_element_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("identity_element.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_identity_element_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("identity_element.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_identity_element_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("identity_element.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_image_scaling_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("image_scaling.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_image_scaling_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("image_scaling.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_image_scaling_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("image_scaling.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_image_scaling_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("image_scaling.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_impulse_response_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("impulse_response.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_impulse_response_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("impulse_response.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_impulse_response_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("impulse_response.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_impulse_response_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("impulse_response.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_includes_vs_function_declaration_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("includes_vs_function_declaration.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_includes_vs_function_declaration_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("includes_vs_function_declaration.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_includes_vs_function_declaration_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("includes_vs_function_declaration.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_includes_vs_function_declaration_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("includes_vs_function_declaration.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_include_guard_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("include_guard.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_include_guard_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("include_guard.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_include_guard_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("include_guard.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_include_guard_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("include_guard.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_independent_events_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("independent_events.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_independent_events_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("independent_events.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_independent_events_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("independent_events.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_independent_events_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("independent_events.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_induction_proofs_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("induction_proofs.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_induction_proofs_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("induction_proofs.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_induction_proofs_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("induction_proofs.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_induction_proofs_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("induction_proofs.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_inductor_current_voltage_equation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("inductor_current_voltage_equation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_inductor_current_voltage_equation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("inductor_current_voltage_equation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_inductor_current_voltage_equation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("inductor_current_voltage_equation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_inductor_current_voltage_equation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("inductor_current_voltage_equation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_information_theory_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("information_theory.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_information_theory_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("information_theory.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_information_theory_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("information_theory.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_information_theory_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("information_theory.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_injective_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("injective.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_injective_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("injective.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_injective_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("injective.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_injective_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("injective.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_inline_keyword_c_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("inline_keyword_c.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_inline_keyword_c_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("inline_keyword_c.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_inline_keyword_c_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("inline_keyword_c.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_inline_keyword_c_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("inline_keyword_c.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_inner_product_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("inner_product.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_inner_product_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("inner_product.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_inner_product_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("inner_product.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_inner_product_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("inner_product.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_inorder_tree_walk_algorithm_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("inorder_tree_walk_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_inorder_tree_walk_algorithm_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("inorder_tree_walk_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_inorder_tree_walk_algorithm_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("inorder_tree_walk_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_inorder_tree_walk_algorithm_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("inorder_tree_walk_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_insertion_sort_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("insertion_sort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_insertion_sort_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("insertion_sort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_insertion_sort_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("insertion_sort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_insertion_sort_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("insertion_sort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_integer_linear_programming_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("integer_linear_programming.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_integer_linear_programming_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("integer_linear_programming.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_integer_linear_programming_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("integer_linear_programming.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_integer_linear_programming_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("integer_linear_programming.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_internal_power_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("internal_power.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_internal_power_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("internal_power.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_internal_power_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("internal_power.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_internal_power_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("internal_power.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_intersection_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("intersection.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_intersection_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("intersection.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_intersection_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("intersection.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_intersection_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("intersection.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_inverse_element_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("inverse_element.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_inverse_element_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("inverse_element.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_inverse_element_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("inverse_element.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_inverse_element_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("inverse_element.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_inverse_kinematics_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("inverse_kinematics.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_inverse_kinematics_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("inverse_kinematics.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_inverse_kinematics_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("inverse_kinematics.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_inverse_kinematics_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("inverse_kinematics.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_invertability_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("invertability.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_invertability_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("invertability.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_invertability_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("invertability.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_invertability_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("invertability.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_in_the_money_vs_out_of_the_money_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("in_the_money_vs_out_of_the_money.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_in_the_money_vs_out_of_the_money_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("in_the_money_vs_out_of_the_money.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_in_the_money_vs_out_of_the_money_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("in_the_money_vs_out_of_the_money.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_in_the_money_vs_out_of_the_money_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("in_the_money_vs_out_of_the_money.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_ip_address_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("ip_address.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_ip_address_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("ip_address.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_ip_address_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("ip_address.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_ip_address_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("ip_address.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_isomorphism_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("isomorphism.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_isomorphism_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("isomorphism.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_isomorphism_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("isomorphism.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_isomorphism_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("isomorphism.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_iso_files_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("iso_files.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_iso_files_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("iso_files.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_iso_files_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("iso_files.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_iso_files_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("iso_files.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_jacobians_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("jacobians.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_jacobians_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("jacobians.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_jacobians_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("jacobians.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_jacobians_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("jacobians.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_jacobian_linearization_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("jacobian_linearization.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_jacobian_linearization_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("jacobian_linearization.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_jacobian_linearization_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("jacobian_linearization.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_jacobian_linearization_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("jacobian_linearization.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_james_stein_estimator_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("james_stein_estimator.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_james_stein_estimator_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("james_stein_estimator.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_james_stein_estimator_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("james_stein_estimator.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_james_stein_estimator_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("james_stein_estimator.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_joint_possibilities_and_impossibilities_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("joint_possibilities_and_impossibilities.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_joint_possibilities_and_impossibilities_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("joint_possibilities_and_impossibilities.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_joint_possibilities_and_impossibilities_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("joint_possibilities_and_impossibilities.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_joint_possibilities_and_impossibilities_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("joint_possibilities_and_impossibilities.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_kalman_filter_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("kalman_filter.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_kalman_filter_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("kalman_filter.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_kalman_filter_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("kalman_filter.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_kalman_filter_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("kalman_filter.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_karnaugh_maps_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("karnaugh_maps.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_karnaugh_maps_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("karnaugh_maps.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_karnaugh_maps_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("karnaugh_maps.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_karnaugh_maps_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("karnaugh_maps.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_kernel_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("kernel.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_kernel_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("kernel.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_kernel_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("kernel.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_kernel_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("kernel.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_kernel_functions_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("kernel_functions.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_kernel_functions_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("kernel_functions.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_kernel_functions_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("kernel_functions.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_kernel_functions_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("kernel_functions.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_kernel_operating_systems_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("kernel_operating_systems.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_kernel_operating_systems_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("kernel_operating_systems.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_kernel_operating_systems_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("kernel_operating_systems.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_kernel_operating_systems_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("kernel_operating_systems.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_kleene_s_theorem_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("kleene_s_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_kleene_s_theorem_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("kleene_s_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_kleene_s_theorem_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("kleene_s_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_kleene_s_theorem_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("kleene_s_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_kruskal_s_algorithm_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("kruskal_s_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_kruskal_s_algorithm_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("kruskal_s_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_kruskal_s_algorithm_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("kruskal_s_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_kruskal_s_algorithm_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("kruskal_s_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_lambda_calculus_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("lambda_calculus.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_lambda_calculus_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("lambda_calculus.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_lambda_calculus_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("lambda_calculus.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_lambda_calculus_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("lambda_calculus.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_lambda_functions_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("lambda_functions.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_lambda_functions_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("lambda_functions.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_lambda_functions_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("lambda_functions.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_lambda_functions_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("lambda_functions.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_laplace_equation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("laplace_equation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_laplace_equation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("laplace_equation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_laplace_equation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("laplace_equation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_laplace_equation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("laplace_equation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_laplace_s_rule_of_succession_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("laplace_s_rule_of_succession.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_laplace_s_rule_of_succession_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("laplace_s_rule_of_succession.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_laplace_s_rule_of_succession_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("laplace_s_rule_of_succession.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_laplace_s_rule_of_succession_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("laplace_s_rule_of_succession.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_laplace_transform_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("laplace_transform.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_laplace_transform_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("laplace_transform.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_laplace_transform_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("laplace_transform.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_laplace_transform_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("laplace_transform.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_laplacian_operator_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("laplacian_operator.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_laplacian_operator_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("laplacian_operator.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_laplacian_operator_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("laplacian_operator.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_laplacian_operator_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("laplacian_operator.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_law_of_excluded_middle_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("law_of_excluded_middle.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_law_of_excluded_middle_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("law_of_excluded_middle.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_law_of_excluded_middle_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("law_of_excluded_middle.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_law_of_excluded_middle_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("law_of_excluded_middle.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_lead_lag_controller_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("lead_lag_controller.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_lead_lag_controller_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("lead_lag_controller.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_lead_lag_controller_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("lead_lag_controller.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_lead_lag_controller_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("lead_lag_controller.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_leakage_power_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("leakage_power.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_leakage_power_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("leakage_power.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_leakage_power_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("leakage_power.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_leakage_power_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("leakage_power.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_leonhard_euler_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("leonhard_euler.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_leonhard_euler_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("leonhard_euler.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_leonhard_euler_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("leonhard_euler.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_leonhard_euler_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("leonhard_euler.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_liar_s_pradox_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("liar_s_pradox.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_liar_s_pradox_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("liar_s_pradox.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_liar_s_pradox_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("liar_s_pradox.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_liar_s_pradox_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("liar_s_pradox.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_limits_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("limits.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_limits_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("limits.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_limits_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("limits.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_limits_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("limits.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_linear_differential_equations_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("linear_differential_equations.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_linear_differential_equations_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("linear_differential_equations.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_linear_differential_equations_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("linear_differential_equations.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_linear_differential_equations_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("linear_differential_equations.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_linear_interpolation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("linear_interpolation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_linear_interpolation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("linear_interpolation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_linear_interpolation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("linear_interpolation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_linear_interpolation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("linear_interpolation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_linear_programming_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("linear_programming.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_linear_programming_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("linear_programming.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_linear_programming_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("linear_programming.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_linear_programming_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("linear_programming.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_linear_quadratic_regulator_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("linear_quadratic_regulator.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_linear_quadratic_regulator_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("linear_quadratic_regulator.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_linear_quadratic_regulator_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("linear_quadratic_regulator.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_linear_quadratic_regulator_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("linear_quadratic_regulator.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_linear_time_invarient_systems_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("linear_time_invarient_systems.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_linear_time_invarient_systems_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("linear_time_invarient_systems.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_linear_time_invarient_systems_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("linear_time_invarient_systems.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_linear_time_invarient_systems_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("linear_time_invarient_systems.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_linker_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("linker.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_linker_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("linker.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_linker_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("linker.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_linker_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("linker.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_linux_add_write_permission_to_file_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("linux_add_write_permission_to_file.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_linux_add_write_permission_to_file_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("linux_add_write_permission_to_file.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_linux_add_write_permission_to_file_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("linux_add_write_permission_to_file.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_linux_add_write_permission_to_file_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("linux_add_write_permission_to_file.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_logical_connectives_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("logical_connectives.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_logical_connectives_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("logical_connectives.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_logical_connectives_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("logical_connectives.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_logical_connectives_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("logical_connectives.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_logical_equivalence_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("logical_equivalence.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_logical_equivalence_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("logical_equivalence.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_logical_equivalence_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("logical_equivalence.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_logical_equivalence_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("logical_equivalence.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_logical_propagation_delay_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("logical_propagation_delay.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_logical_propagation_delay_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("logical_propagation_delay.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_logical_propagation_delay_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("logical_propagation_delay.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_logical_propagation_delay_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("logical_propagation_delay.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_logical_validity_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("logical_validity.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_logical_validity_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("logical_validity.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_logical_validity_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("logical_validity.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_logical_validity_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("logical_validity.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_loop_invariant_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("loop_invariant.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_loop_invariant_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("loop_invariant.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_loop_invariant_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("loop_invariant.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_loop_invariant_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("loop_invariant.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_lowest_common_multiple_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("lowest_common_multiple.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_lowest_common_multiple_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("lowest_common_multiple.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_lowest_common_multiple_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("lowest_common_multiple.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_lowest_common_multiple_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("lowest_common_multiple.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_lru_cache_python_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("lru_cache_python.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_lru_cache_python_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("lru_cache_python.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_lru_cache_python_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("lru_cache_python.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_lru_cache_python_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("lru_cache_python.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_lru_caching_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("lru_caching.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_lru_caching_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("lru_caching.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_lru_caching_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("lru_caching.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_lru_caching_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("lru_caching.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_lti_system_stability_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("lti_system_stability.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_lti_system_stability_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("lti_system_stability.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_lti_system_stability_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("lti_system_stability.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_lti_system_stability_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("lti_system_stability.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_luminance_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("luminance.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_luminance_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("luminance.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_luminance_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("luminance.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_luminance_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("luminance.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_luminance_noise_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("luminance_noise.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_luminance_noise_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("luminance_noise.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_luminance_noise_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("luminance_noise.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_luminance_noise_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("luminance_noise.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_l_hopitals_rule_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("l_hopitals_rule.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_l_hopitals_rule_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("l_hopitals_rule.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_l_hopitals_rule_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("l_hopitals_rule.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_l_hopitals_rule_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("l_hopitals_rule.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_manifold_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("manifold.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_manifold_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("manifold.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_manifold_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("manifold.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_manifold_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("manifold.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_martingale_betting_strategy_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("martingale_betting_strategy.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_martingale_betting_strategy_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("martingale_betting_strategy.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_martingale_betting_strategy_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("martingale_betting_strategy.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_martingale_betting_strategy_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("martingale_betting_strategy.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_master_theorem_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("master_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_master_theorem_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("master_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_master_theorem_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("master_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_master_theorem_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("master_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_mathematical_axioms_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("mathematical_axioms.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_mathematical_axioms_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("mathematical_axioms.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_mathematical_axioms_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("mathematical_axioms.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_mathematical_axioms_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("mathematical_axioms.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_matrix_inversion_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("matrix_inversion.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_matrix_inversion_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("matrix_inversion.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_matrix_inversion_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("matrix_inversion.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_matrix_inversion_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("matrix_inversion.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_matrix_multiplication_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("matrix_multiplication.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_matrix_multiplication_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("matrix_multiplication.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_matrix_multiplication_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("matrix_multiplication.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_matrix_multiplication_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("matrix_multiplication.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_mealy_machine_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("mealy_machine.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_mealy_machine_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("mealy_machine.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_mealy_machine_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("mealy_machine.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_mealy_machine_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("mealy_machine.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_median_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("median.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_median_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("median.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_median_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("median.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_median_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("median.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_memory_leak_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("memory_leak.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_memory_leak_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("memory_leak.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_memory_leak_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("memory_leak.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_memory_leak_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("memory_leak.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_memory_management_unit_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("memory_management_unit.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_memory_management_unit_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("memory_management_unit.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_memory_management_unit_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("memory_management_unit.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_memory_management_unit_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("memory_management_unit.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_merge_sort_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("merge_sort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_merge_sort_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("merge_sort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_merge_sort_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("merge_sort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_merge_sort_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("merge_sort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_metaprogramming_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("metaprogramming.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_metaprogramming_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("metaprogramming.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_metaprogramming_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("metaprogramming.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_metaprogramming_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("metaprogramming.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_metatheory_of_truth_functional_language_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("metatheory_of_truth_functional_language.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_metatheory_of_truth_functional_language_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("metatheory_of_truth_functional_language.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_metatheory_of_truth_functional_language_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("metatheory_of_truth_functional_language.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_metatheory_of_truth_functional_language_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("metatheory_of_truth_functional_language.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_minimum_spanning_tree_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("minimum_spanning_tree.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_minimum_spanning_tree_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("minimum_spanning_tree.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_minimum_spanning_tree_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("minimum_spanning_tree.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_minimum_spanning_tree_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("minimum_spanning_tree.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_mixer_circuit_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("mixer_circuit.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_mixer_circuit_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("mixer_circuit.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_mixer_circuit_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("mixer_circuit.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_mixer_circuit_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("mixer_circuit.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_modus_ponens_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("modus_ponens.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_modus_ponens_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("modus_ponens.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_modus_ponens_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("modus_ponens.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_modus_ponens_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("modus_ponens.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_monte_carlo_methods_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("monte_carlo_methods.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_monte_carlo_methods_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("monte_carlo_methods.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_monte_carlo_methods_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("monte_carlo_methods.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_monte_carlo_methods_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("monte_carlo_methods.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_moore_machine_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("moore_machine.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_moore_machine_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("moore_machine.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_moore_machine_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("moore_machine.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_moore_machine_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("moore_machine.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_morphisms_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("morphisms.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_morphisms_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("morphisms.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_morphisms_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("morphisms.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_morphisms_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("morphisms.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_mosfet_current_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("mosfet_current.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_mosfet_current_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("mosfet_current.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_mosfet_current_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("mosfet_current.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_mosfet_current_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("mosfet_current.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_mosfet_operation_regions_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("mosfet_operation_regions.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_mosfet_operation_regions_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("mosfet_operation_regions.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_mosfet_operation_regions_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("mosfet_operation_regions.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_mosfet_operation_regions_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("mosfet_operation_regions.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_mosfet_transistor_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("mosfet_transistor.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_mosfet_transistor_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("mosfet_transistor.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_mosfet_transistor_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("mosfet_transistor.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_mosfet_transistor_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("mosfet_transistor.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_multiplexer_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("multiplexer.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_multiplexer_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("multiplexer.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_multiplexer_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("multiplexer.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_multiplexer_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("multiplexer.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_multiple_constant_multiplication_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("multiple_constant_multiplication.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_multiple_constant_multiplication_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("multiple_constant_multiplication.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_multiple_constant_multiplication_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("multiple_constant_multiplication.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_multiple_constant_multiplication_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("multiple_constant_multiplication.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_multiple_integration_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("multiple_integration.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_multiple_integration_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("multiple_integration.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_multiple_integration_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("multiple_integration.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_multiple_integration_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("multiple_integration.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_multiple_integration_change_of_variables_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("multiple_integration_change_of_variables.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_multiple_integration_change_of_variables_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("multiple_integration_change_of_variables.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_multiple_integration_change_of_variables_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("multiple_integration_change_of_variables.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_multiple_integration_change_of_variables_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("multiple_integration_change_of_variables.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_multivector_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("multivector.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_multivector_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("multivector.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_multivector_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("multivector.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_multivector_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("multivector.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_multi_armed_bandit_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("multi_armed_bandit.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_multi_armed_bandit_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("multi_armed_bandit.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_multi_armed_bandit_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("multi_armed_bandit.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_multi_armed_bandit_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("multi_armed_bandit.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_mutability_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("mutability.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_mutability_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("mutability.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_mutability_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("mutability.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_mutability_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("mutability.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_mutex_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("mutex.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_mutex_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("mutex.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_mutex_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("mutex.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_mutex_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("mutex.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_mutually_exclusive_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("mutually_exclusive.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_mutually_exclusive_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("mutually_exclusive.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_mutually_exclusive_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("mutually_exclusive.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_mutually_exclusive_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("mutually_exclusive.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_mutually_exclusive_events_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("mutually_exclusive_events.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_mutually_exclusive_events_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("mutually_exclusive_events.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_mutually_exclusive_events_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("mutually_exclusive_events.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_mutually_exclusive_events_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("mutually_exclusive_events.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_mutually_exhaustive_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("mutually_exhaustive.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_mutually_exhaustive_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("mutually_exhaustive.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_mutually_exhaustive_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("mutually_exhaustive.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_mutually_exhaustive_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("mutually_exhaustive.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_naive_set_theory_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("naive_set_theory.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_naive_set_theory_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("naive_set_theory.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_naive_set_theory_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("naive_set_theory.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_naive_set_theory_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("naive_set_theory.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_nash_equilibrium_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("nash_equilibrium.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_nash_equilibrium_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("nash_equilibrium.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_nash_equilibrium_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("nash_equilibrium.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_nash_equilibrium_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("nash_equilibrium.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_natural_deduction_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("natural_deduction.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_natural_deduction_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("natural_deduction.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_natural_deduction_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("natural_deduction.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_natural_deduction_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("natural_deduction.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_necessary_truths_falsehoods_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("necessary_truths_falsehoods.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_necessary_truths_falsehoods_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("necessary_truths_falsehoods.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_necessary_truths_falsehoods_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("necessary_truths_falsehoods.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_necessary_truths_falsehoods_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("necessary_truths_falsehoods.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_neovim_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("neovim.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_neovim_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("neovim.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_neovim_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("neovim.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_neovim_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("neovim.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_nmap_command_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("nmap_command.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_nmap_command_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("nmap_command.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_nmap_command_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("nmap_command.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_nmap_command_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("nmap_command.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_nm_command_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("nm_command.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_nm_command_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("nm_command.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_nm_command_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("nm_command.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_nm_command_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("nm_command.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_nodal_analysis_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("nodal_analysis.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_nodal_analysis_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("nodal_analysis.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_nodal_analysis_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("nodal_analysis.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_nodal_analysis_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("nodal_analysis.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_nondeterministic_polynomial_time_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("nondeterministic_polynomial_time.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_nondeterministic_polynomial_time_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("nondeterministic_polynomial_time.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_nondeterministic_polynomial_time_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("nondeterministic_polynomial_time.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_nondeterministic_polynomial_time_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("nondeterministic_polynomial_time.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_nondeterministic_turing_machine_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("nondeterministic_turing_machine.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_nondeterministic_turing_machine_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("nondeterministic_turing_machine.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_nondeterministic_turing_machine_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("nondeterministic_turing_machine.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_nondeterministic_turing_machine_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("nondeterministic_turing_machine.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_normal_distribution_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("normal_distribution.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_normal_distribution_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("normal_distribution.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_normal_distribution_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("normal_distribution.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_normal_distribution_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("normal_distribution.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_np_complete_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("np_complete.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_np_complete_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("np_complete.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_np_complete_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("np_complete.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_np_complete_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("np_complete.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_nyquist_rate_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("nyquist_rate.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_nyquist_rate_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("nyquist_rate.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_nyquist_rate_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("nyquist_rate.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_nyquist_rate_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("nyquist_rate.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_object_files_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("object_files.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_object_files_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("object_files.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_object_files_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("object_files.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_object_files_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("object_files.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_ohm_s_law_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("ohm_s_law.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_ohm_s_law_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("ohm_s_law.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_ohm_s_law_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("ohm_s_law.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_ohm_s_law_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("ohm_s_law.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_operational_amplifiers_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("operational_amplifiers.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_operational_amplifiers_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("operational_amplifiers.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_operational_amplifiers_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("operational_amplifiers.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_operational_amplifiers_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("operational_amplifiers.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_opnsense_router_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("opnsense_router.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_opnsense_router_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("opnsense_router.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_opnsense_router_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("opnsense_router.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_opnsense_router_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("opnsense_router.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_optimal_control_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("optimal_control.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_optimal_control_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("optimal_control.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_optimal_control_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("optimal_control.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_optimal_control_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("optimal_control.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_ordering_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("ordering.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_ordering_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("ordering.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_ordering_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("ordering.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_ordering_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("ordering.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_outer_product_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("outer_product.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_outer_product_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("outer_product.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_outer_product_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("outer_product.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_outer_product_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("outer_product.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_pade_approximation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("pade_approximation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_pade_approximation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("pade_approximation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_pade_approximation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("pade_approximation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_pade_approximation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("pade_approximation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_page_tables_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("page_tables.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_page_tables_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("page_tables.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_page_tables_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("page_tables.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_page_tables_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("page_tables.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_parallel_grep_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("parallel_grep.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_parallel_grep_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("parallel_grep.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_parallel_grep_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("parallel_grep.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_parallel_grep_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("parallel_grep.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_parallel_programming_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("parallel_programming.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_parallel_programming_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("parallel_programming.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_parallel_programming_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("parallel_programming.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_parallel_programming_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("parallel_programming.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_partial_correctness_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("partial_correctness.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_partial_correctness_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("partial_correctness.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_partial_correctness_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("partial_correctness.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_partial_correctness_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("partial_correctness.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_path_finding_algorithms_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("path_finding_algorithms.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_path_finding_algorithms_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("path_finding_algorithms.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_path_finding_algorithms_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("path_finding_algorithms.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_path_finding_algorithms_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("path_finding_algorithms.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_perfect_hashing_algorithm_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("perfect_hashing_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_perfect_hashing_algorithm_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("perfect_hashing_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_perfect_hashing_algorithm_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("perfect_hashing_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_perfect_hashing_algorithm_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("perfect_hashing_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_phase_lock_loop_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("phase_lock_loop.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_phase_lock_loop_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("phase_lock_loop.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_phase_lock_loop_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("phase_lock_loop.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_phase_lock_loop_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("phase_lock_loop.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_phase_modulation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("phase_modulation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_phase_modulation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("phase_modulation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_phase_modulation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("phase_modulation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_phase_modulation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("phase_modulation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_pid_controllers_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("pid_controllers.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_pid_controllers_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("pid_controllers.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_pid_controllers_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("pid_controllers.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_pid_controllers_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("pid_controllers.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_pierre_de_fermat_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("pierre_de_fermat.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_pierre_de_fermat_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("pierre_de_fermat.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_pierre_de_fermat_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("pierre_de_fermat.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_pierre_de_fermat_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("pierre_de_fermat.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_pierre_simone_laplace_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("pierre_simone_laplace.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_pierre_simone_laplace_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("pierre_simone_laplace.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_pierre_simone_laplace_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("pierre_simone_laplace.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_pierre_simone_laplace_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("pierre_simone_laplace.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_ping_pong_buffer_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("ping_pong_buffer.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_ping_pong_buffer_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("ping_pong_buffer.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_ping_pong_buffer_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("ping_pong_buffer.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_ping_pong_buffer_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("ping_pong_buffer.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_pipe_command_to_stdout_and_file_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("pipe_command_to_stdout_and_file.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_pipe_command_to_stdout_and_file_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("pipe_command_to_stdout_and_file.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_pipe_command_to_stdout_and_file_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("pipe_command_to_stdout_and_file.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_pipe_command_to_stdout_and_file_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("pipe_command_to_stdout_and_file.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_pixel_processing_algorithms_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("pixel_processing_algorithms.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_pixel_processing_algorithms_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("pixel_processing_algorithms.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_pixel_processing_algorithms_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("pixel_processing_algorithms.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_pixel_processing_algorithms_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("pixel_processing_algorithms.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_planar_graph_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("planar_graph.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_planar_graph_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("planar_graph.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_planar_graph_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("planar_graph.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_planar_graph_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("planar_graph.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_pointer_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("pointer.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_pointer_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("pointer.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_pointer_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("pointer.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_pointer_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("pointer.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_pointer_vs_reference_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("pointer_vs_reference.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_pointer_vs_reference_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("pointer_vs_reference.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_pointer_vs_reference_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("pointer_vs_reference.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_pointer_vs_reference_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("pointer_vs_reference.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_point_filtering_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("point_filtering.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_point_filtering_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("point_filtering.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_point_filtering_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("point_filtering.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_point_filtering_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("point_filtering.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_poisson_distribution_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("poisson_distribution.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_poisson_distribution_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("poisson_distribution.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_poisson_distribution_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("poisson_distribution.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_poisson_distribution_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("poisson_distribution.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_pollard_s_rho_algorithm_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("pollard_s_rho_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_pollard_s_rho_algorithm_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("pollard_s_rho_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_pollard_s_rho_algorithm_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("pollard_s_rho_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_pollard_s_rho_algorithm_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("pollard_s_rho_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_polynomial_division_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("polynomial_division.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_polynomial_division_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("polynomial_division.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_polynomial_division_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("polynomial_division.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_polynomial_division_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("polynomial_division.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_polynomial_time_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("polynomial_time.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_polynomial_time_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("polynomial_time.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_polynomial_time_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("polynomial_time.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_polynomial_time_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("polynomial_time.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_polyphase_filters_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("polyphase_filters.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_polyphase_filters_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("polyphase_filters.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_polyphase_filters_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("polyphase_filters.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_polyphase_filters_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("polyphase_filters.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_powerset_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("powerset.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_powerset_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("powerset.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_powerset_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("powerset.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_powerset_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("powerset.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_prime_factorization_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("prime_factorization.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_prime_factorization_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("prime_factorization.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_prime_factorization_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("prime_factorization.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_prime_factorization_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("prime_factorization.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_prim_s_algorithm_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("prim_s_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_prim_s_algorithm_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("prim_s_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_prim_s_algorithm_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("prim_s_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_prim_s_algorithm_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("prim_s_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_principle_component_analysis_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("principle_component_analysis.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_principle_component_analysis_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("principle_component_analysis.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_principle_component_analysis_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("principle_component_analysis.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_principle_component_analysis_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("principle_component_analysis.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_principle_of_least_action_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("principle_of_least_action.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_principle_of_least_action_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("principle_of_least_action.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_principle_of_least_action_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("principle_of_least_action.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_principle_of_least_action_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("principle_of_least_action.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_priority_queue_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("priority_queue.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_priority_queue_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("priority_queue.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_priority_queue_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("priority_queue.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_priority_queue_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("priority_queue.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_probability_density_function_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("probability_density_function.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_probability_density_function_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("probability_density_function.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_probability_density_function_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("probability_density_function.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_probability_density_function_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("probability_density_function.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_probability_mass_function_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("probability_mass_function.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_probability_mass_function_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("probability_mass_function.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_probability_mass_function_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("probability_mass_function.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_probability_mass_function_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("probability_mass_function.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_procedural_macro_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("procedural_macro.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_procedural_macro_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("procedural_macro.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_procedural_macro_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("procedural_macro.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_procedural_macro_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("procedural_macro.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_process_fork_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("process_fork.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_process_fork_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("process_fork.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_process_fork_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("process_fork.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_process_fork_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("process_fork.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_process_id_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("process_id.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_process_id_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("process_id.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_process_id_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("process_id.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_process_id_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("process_id.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_proof_by_contradiction_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("proof_by_contradiction.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_proof_by_contradiction_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("proof_by_contradiction.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_proof_by_contradiction_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("proof_by_contradiction.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_proof_by_contradiction_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("proof_by_contradiction.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_propagation_delay_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("propagation_delay.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_propagation_delay_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("propagation_delay.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_propagation_delay_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("propagation_delay.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_propagation_delay_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("propagation_delay.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_proportional_controllers_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("proportional_controllers.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_proportional_controllers_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("proportional_controllers.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_proportional_controllers_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("proportional_controllers.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_proportional_controllers_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("proportional_controllers.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_pumping_lemma_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("pumping_lemma.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_pumping_lemma_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("pumping_lemma.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_pumping_lemma_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("pumping_lemma.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_pumping_lemma_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("pumping_lemma.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_pushdown_automata_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("pushdown_automata.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_pushdown_automata_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("pushdown_automata.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_pushdown_automata_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("pushdown_automata.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_pushdown_automata_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("pushdown_automata.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_push_operation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("push_operation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_push_operation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("push_operation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_push_operation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("push_operation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_push_operation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("push_operation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_put_option_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("put_option.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_put_option_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("put_option.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_put_option_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("put_option.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_put_option_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("put_option.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_p_vs_np_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("p_vs_np.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_p_vs_np_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("p_vs_np.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_p_vs_np_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("p_vs_np.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_p_vs_np_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("p_vs_np.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_quadratic_sieve_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("quadratic_sieve.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_quadratic_sieve_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("quadratic_sieve.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_quadratic_sieve_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("quadratic_sieve.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_quadratic_sieve_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("quadratic_sieve.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_quantifiers_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("quantifiers.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_quantifiers_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("quantifiers.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_quantifiers_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("quantifiers.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_quantifiers_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("quantifiers.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_quantum_bogo_sort_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("quantum_bogo_sort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_quantum_bogo_sort_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("quantum_bogo_sort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_quantum_bogo_sort_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("quantum_bogo_sort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_quantum_bogo_sort_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("quantum_bogo_sort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_quaternions_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("quaternions.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_quaternions_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("quaternions.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_quaternions_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("quaternions.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_quaternions_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("quaternions.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_quicksort_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("quicksort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_quicksort_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("quicksort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_quicksort_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("quicksort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_quicksort_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("quicksort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_radix_sort_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("radix_sort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_radix_sort_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("radix_sort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_radix_sort_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("radix_sort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_radix_sort_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("radix_sort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_random_variable_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("random_variable.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_random_variable_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("random_variable.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_random_variable_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("random_variable.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_random_variable_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("random_variable.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rational_root_theorem_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rational_root_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rational_root_theorem_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rational_root_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rational_root_theorem_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rational_root_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rational_root_theorem_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rational_root_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_ray_marching_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("ray_marching.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_ray_marching_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("ray_marching.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_ray_marching_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("ray_marching.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_ray_marching_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("ray_marching.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rc_smart_pointer_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rc_smart_pointer.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rc_smart_pointer_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rc_smart_pointer.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rc_smart_pointer_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rc_smart_pointer.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rc_smart_pointer_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rc_smart_pointer.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rc_vs_arc_in_rust_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rc_vs_arc_in_rust.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rc_vs_arc_in_rust_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rc_vs_arc_in_rust.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rc_vs_arc_in_rust_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rc_vs_arc_in_rust.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rc_vs_arc_in_rust_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rc_vs_arc_in_rust.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_realpath_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("realpath.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_realpath_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("realpath.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_realpath_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("realpath.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_realpath_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("realpath.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_red_black_trees_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("red_black_trees.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_red_black_trees_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("red_black_trees.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_red_black_trees_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("red_black_trees.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_red_black_trees_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("red_black_trees.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_red_black_tree_delete_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("red_black_tree_delete.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_red_black_tree_delete_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("red_black_tree_delete.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_red_black_tree_delete_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("red_black_tree_delete.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_red_black_tree_delete_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("red_black_tree_delete.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_red_black_tree_insert_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("red_black_tree_insert.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_red_black_tree_insert_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("red_black_tree_insert.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_red_black_tree_insert_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("red_black_tree_insert.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_red_black_tree_insert_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("red_black_tree_insert.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_referencing_vs_dereferencing_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("referencing_vs_dereferencing.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_referencing_vs_dereferencing_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("referencing_vs_dereferencing.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_referencing_vs_dereferencing_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("referencing_vs_dereferencing.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_referencing_vs_dereferencing_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("referencing_vs_dereferencing.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_reflexive_relation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("reflexive_relation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_reflexive_relation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("reflexive_relation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_reflexive_relation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("reflexive_relation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_reflexive_relation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("reflexive_relation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_regex_lookarounds_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("regex_lookarounds.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_regex_lookarounds_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("regex_lookarounds.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_regex_lookarounds_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("regex_lookarounds.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_regex_lookarounds_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("regex_lookarounds.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_regular_expression_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("regular_expression.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_regular_expression_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("regular_expression.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_regular_expression_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("regular_expression.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_regular_expression_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("regular_expression.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_regular_graph_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("regular_graph.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_regular_graph_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("regular_graph.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_regular_graph_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("regular_graph.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_regular_graph_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("regular_graph.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_regular_language_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("regular_language.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_regular_language_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("regular_language.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_regular_language_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("regular_language.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_regular_language_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("regular_language.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_reinforcement_learning_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("reinforcement_learning.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_reinforcement_learning_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("reinforcement_learning.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_reinforcement_learning_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("reinforcement_learning.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_reinforcement_learning_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("reinforcement_learning.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_remainder_theorem_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("remainder_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_remainder_theorem_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("remainder_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_remainder_theorem_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("remainder_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_remainder_theorem_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("remainder_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_resonance_peak_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("resonance_peak.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_resonance_peak_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("resonance_peak.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_resonance_peak_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("resonance_peak.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_resonance_peak_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("resonance_peak.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_richard_feynman_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("richard_feynman.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_richard_feynman_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("richard_feynman.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_richard_feynman_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("richard_feynman.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_richard_feynman_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("richard_feynman.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rlc_circuits_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rlc_circuits.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rlc_circuits_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rlc_circuits.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rlc_circuits_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rlc_circuits.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rlc_circuits_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rlc_circuits.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rlc_circuit_resonance_frequency_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rlc_circuit_resonance_frequency.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rlc_circuit_resonance_frequency_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rlc_circuit_resonance_frequency.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rlc_circuit_resonance_frequency_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rlc_circuit_resonance_frequency.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rlc_circuit_resonance_frequency_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rlc_circuit_resonance_frequency.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_robust_principle_component_analysis_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("robust_principle_component_analysis.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_robust_principle_component_analysis_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("robust_principle_component_analysis.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_robust_principle_component_analysis_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("robust_principle_component_analysis.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_robust_principle_component_analysis_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("robust_principle_component_analysis.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rooted_tree_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rooted_tree.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rooted_tree_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rooted_tree.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rooted_tree_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rooted_tree.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rooted_tree_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rooted_tree.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_root_locus_plot_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("root_locus_plot.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_root_locus_plot_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("root_locus_plot.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_root_locus_plot_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("root_locus_plot.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_root_locus_plot_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("root_locus_plot.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rpath_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rpath.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rpath_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rpath.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rpath_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rpath.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rpath_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rpath.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rsa_encryption_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rsa_encryption.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rsa_encryption_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rsa_encryption.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rsa_encryption_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rsa_encryption.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rsa_encryption_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rsa_encryption.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rsync_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rsync.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rsync_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rsync.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rsync_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rsync.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rsync_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rsync.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rs_latch_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rs_latch.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rs_latch_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rs_latch.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rs_latch_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rs_latch.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rs_latch_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rs_latch.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_russell_s_paradox_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("russell_s_paradox.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_russell_s_paradox_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("russell_s_paradox.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_russell_s_paradox_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("russell_s_paradox.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_russell_s_paradox_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("russell_s_paradox.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rust_env_and_option_env_macros_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rust_env_and_option_env_macros.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rust_env_and_option_env_macros_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rust_env_and_option_env_macros.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rust_env_and_option_env_macros_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_env_and_option_env_macros.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rust_env_and_option_env_macros_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_env_and_option_env_macros.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rust_file_io_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rust_file_io.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rust_file_io_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rust_file_io.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rust_file_io_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_file_io.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rust_file_io_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_file_io.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rust_filter_map_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rust_filter_map.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rust_filter_map_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rust_filter_map.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rust_filter_map_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_filter_map.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rust_filter_map_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_filter_map.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rust_flamegraph_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rust_flamegraph.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rust_flamegraph_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rust_flamegraph.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rust_flamegraph_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_flamegraph.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rust_flamegraph_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_flamegraph.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rust_fragment_specifiers_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rust_fragment_specifiers.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rust_fragment_specifiers_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rust_fragment_specifiers.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rust_fragment_specifiers_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_fragment_specifiers.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rust_fragment_specifiers_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_fragment_specifiers.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rust_if_let_syntax_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rust_if_let_syntax.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rust_if_let_syntax_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rust_if_let_syntax.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rust_if_let_syntax_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_if_let_syntax.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rust_if_let_syntax_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_if_let_syntax.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rust_iterator_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rust_iterator.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rust_iterator_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rust_iterator.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rust_iterator_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_iterator.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rust_iterator_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_iterator.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rust_iterator_collect_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rust_iterator_collect.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rust_iterator_collect_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rust_iterator_collect.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rust_iterator_collect_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_iterator_collect.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rust_iterator_collect_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_iterator_collect.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rust_iterator_map_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rust_iterator_map.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rust_iterator_map_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rust_iterator_map.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rust_iterator_map_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_iterator_map.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rust_iterator_map_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_iterator_map.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rust_lifetimes_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rust_lifetimes.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rust_lifetimes_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rust_lifetimes.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rust_lifetimes_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_lifetimes.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rust_lifetimes_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_lifetimes.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rust_macros_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rust_macros.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rust_macros_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rust_macros.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rust_macros_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_macros.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rust_macros_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_macros.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rust_ownership_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rust_ownership.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rust_ownership_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rust_ownership.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rust_ownership_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_ownership.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rust_ownership_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_ownership.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rust_path_vs_pathbuf_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rust_path_vs_pathbuf.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rust_path_vs_pathbuf_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rust_path_vs_pathbuf.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rust_path_vs_pathbuf_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_path_vs_pathbuf.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rust_path_vs_pathbuf_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_path_vs_pathbuf.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rust_refcell_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rust_refcell.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rust_refcell_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rust_refcell.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rust_refcell_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_refcell.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rust_refcell_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_refcell.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rust_regex_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rust_regex.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rust_regex_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rust_regex.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rust_regex_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_regex.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rust_regex_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_regex.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rust_regex_capture_groups_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rust_regex_capture_groups.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rust_regex_capture_groups_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rust_regex_capture_groups.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rust_regex_capture_groups_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_regex_capture_groups.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rust_regex_capture_groups_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_regex_capture_groups.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rust_result_enum_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rust_result_enum.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rust_result_enum_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rust_result_enum.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rust_result_enum_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_result_enum.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rust_result_enum_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_result_enum.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rust_slice_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rust_slice.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rust_slice_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rust_slice.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rust_slice_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_slice.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rust_slice_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_slice.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rust_smart_pointer_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rust_smart_pointer.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rust_smart_pointer_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rust_smart_pointer.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rust_smart_pointer_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_smart_pointer.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rust_smart_pointer_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_smart_pointer.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rust_string_vs_osstring_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rust_string_vs_osstring.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rust_string_vs_osstring_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rust_string_vs_osstring.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rust_string_vs_osstring_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_string_vs_osstring.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rust_string_vs_osstring_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_string_vs_osstring.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rust_string_vs_str_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rust_string_vs_str.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rust_string_vs_str_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rust_string_vs_str.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rust_string_vs_str_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_string_vs_str.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rust_string_vs_str_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_string_vs_str.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rust_struct_methods_and_ownership_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rust_struct_methods_and_ownership.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rust_struct_methods_and_ownership_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rust_struct_methods_and_ownership.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rust_struct_methods_and_ownership_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_struct_methods_and_ownership.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rust_struct_methods_and_ownership_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_struct_methods_and_ownership.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rust_traits_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rust_traits.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rust_traits_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rust_traits.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rust_traits_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_traits.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rust_traits_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_traits.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_rust_turbofish_syntax_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("rust_turbofish_syntax.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_rust_turbofish_syntax_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("rust_turbofish_syntax.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_rust_turbofish_syntax_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_turbofish_syntax.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_rust_turbofish_syntax_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("rust_turbofish_syntax.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_r_2r_ladder_dac_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("r_2r_ladder_dac.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_r_2r_ladder_dac_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("r_2r_ladder_dac.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_r_2r_ladder_dac_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("r_2r_ladder_dac.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_r_2r_ladder_dac_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("r_2r_ladder_dac.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_sample_space_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("sample_space.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_sample_space_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("sample_space.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_sample_space_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("sample_space.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_sample_space_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("sample_space.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_satisfiability_logic_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("satisfiability_logic.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_satisfiability_logic_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("satisfiability_logic.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_satisfiability_logic_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("satisfiability_logic.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_satisfiability_logic_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("satisfiability_logic.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_schmitt_trigger_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("schmitt_trigger.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_schmitt_trigger_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("schmitt_trigger.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_schmitt_trigger_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("schmitt_trigger.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_schmitt_trigger_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("schmitt_trigger.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_sed_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("sed.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_sed_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("sed.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_sed_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("sed.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_sed_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("sed.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_selection_sort_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("selection_sort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_selection_sort_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("selection_sort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_selection_sort_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("selection_sort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_selection_sort_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("selection_sort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_sequential_logic_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("sequential_logic.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_sequential_logic_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("sequential_logic.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_sequential_logic_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("sequential_logic.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_sequential_logic_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("sequential_logic.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_shallow_copy_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("shallow_copy.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_shallow_copy_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("shallow_copy.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_shallow_copy_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("shallow_copy.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_shallow_copy_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("shallow_copy.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_shannon_nyquist_sampling_criterion_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("shannon_nyquist_sampling_criterion.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_shannon_nyquist_sampling_criterion_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("shannon_nyquist_sampling_criterion.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_shannon_nyquist_sampling_criterion_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("shannon_nyquist_sampling_criterion.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_shannon_nyquist_sampling_criterion_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("shannon_nyquist_sampling_criterion.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_shebang_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("shebang.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_shebang_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("shebang.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_shebang_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("shebang.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_shebang_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("shebang.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_shockley_diode_equation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("shockley_diode_equation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_shockley_diode_equation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("shockley_diode_equation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_shockley_diode_equation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("shockley_diode_equation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_shockley_diode_equation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("shockley_diode_equation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_shortest_path_tree_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("shortest_path_tree.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_shortest_path_tree_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("shortest_path_tree.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_shortest_path_tree_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("shortest_path_tree.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_shortest_path_tree_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("shortest_path_tree.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_sieve_of_eratosthenes_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("sieve_of_eratosthenes.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_sieve_of_eratosthenes_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("sieve_of_eratosthenes.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_sieve_of_eratosthenes_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("sieve_of_eratosthenes.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_sieve_of_eratosthenes_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("sieve_of_eratosthenes.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_signal_bandwidth_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("signal_bandwidth.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_signal_bandwidth_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("signal_bandwidth.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_signal_bandwidth_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("signal_bandwidth.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_signal_bandwidth_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("signal_bandwidth.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_signal_to_noise_ratio_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("signal_to_noise_ratio.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_signal_to_noise_ratio_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("signal_to_noise_ratio.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_signal_to_noise_ratio_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("signal_to_noise_ratio.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_signal_to_noise_ratio_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("signal_to_noise_ratio.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_simplex_method_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("simplex_method.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_simplex_method_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("simplex_method.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_simplex_method_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("simplex_method.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_simplex_method_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("simplex_method.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_single_constant_multiplication_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("single_constant_multiplication.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_single_constant_multiplication_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("single_constant_multiplication.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_single_constant_multiplication_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("single_constant_multiplication.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_single_constant_multiplication_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("single_constant_multiplication.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_singular_value_decomposition_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("singular_value_decomposition.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_singular_value_decomposition_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("singular_value_decomposition.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_singular_value_decomposition_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("singular_value_decomposition.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_singular_value_decomposition_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("singular_value_decomposition.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_softlinks_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("softlinks.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_softlinks_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("softlinks.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_softlinks_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("softlinks.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_softlinks_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("softlinks.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_softmax_function_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("softmax_function.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_softmax_function_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("softmax_function.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_softmax_function_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("softmax_function.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_softmax_function_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("softmax_function.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_sorting_in_linear_time_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("sorting_in_linear_time.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_sorting_in_linear_time_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("sorting_in_linear_time.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_sorting_in_linear_time_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("sorting_in_linear_time.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_sorting_in_linear_time_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("sorting_in_linear_time.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_soundness_and_completeness_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("soundness_and_completeness.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_soundness_and_completeness_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("soundness_and_completeness.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_soundness_and_completeness_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("soundness_and_completeness.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_soundness_and_completeness_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("soundness_and_completeness.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_sr_latch_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("sr_latch.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_sr_latch_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("sr_latch.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_sr_latch_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("sr_latch.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_sr_latch_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("sr_latch.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_stack_frame_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("stack_frame.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_stack_frame_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("stack_frame.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stack_frame_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("stack_frame.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_stack_frame_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("stack_frame.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_stack_memory_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("stack_memory.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_stack_memory_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("stack_memory.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stack_memory_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("stack_memory.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_stack_memory_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("stack_memory.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_standard_deviation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("standard_deviation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_standard_deviation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("standard_deviation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_standard_deviation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("standard_deviation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_standard_deviation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("standard_deviation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_stars_and_bars_argument_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("stars_and_bars_argument.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_stars_and_bars_argument_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("stars_and_bars_argument.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stars_and_bars_argument_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("stars_and_bars_argument.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_stars_and_bars_argument_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("stars_and_bars_argument.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_state_space_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("state_space.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_state_space_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("state_space.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_state_space_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("state_space.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_state_space_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("state_space.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_statically_linked_library_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("statically_linked_library.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_statically_linked_library_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("statically_linked_library.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_statically_linked_library_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("statically_linked_library.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_statically_linked_library_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("statically_linked_library.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_static_keyword_c_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("static_keyword_c.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_static_keyword_c_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("static_keyword_c.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_static_keyword_c_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("static_keyword_c.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_static_keyword_c_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("static_keyword_c.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_static_lifetime_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("static_lifetime.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_static_lifetime_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("static_lifetime.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_static_lifetime_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("static_lifetime.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_static_lifetime_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("static_lifetime.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_static_memory_allocation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("static_memory_allocation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_static_memory_allocation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("static_memory_allocation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_static_memory_allocation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("static_memory_allocation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_static_memory_allocation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("static_memory_allocation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_static_variables_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("static_variables.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_static_variables_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("static_variables.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_static_variables_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("static_variables.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_static_variables_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("static_variables.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_static_vs_dynamic_dispatch_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("static_vs_dynamic_dispatch.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_static_vs_dynamic_dispatch_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("static_vs_dynamic_dispatch.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_static_vs_dynamic_dispatch_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("static_vs_dynamic_dispatch.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_static_vs_dynamic_dispatch_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("static_vs_dynamic_dispatch.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_stdout_vs_stderr_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("stdout_vs_stderr.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_stdout_vs_stderr_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("stdout_vs_stderr.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stdout_vs_stderr_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("stdout_vs_stderr.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_stdout_vs_stderr_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("stdout_vs_stderr.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_steady_state_error_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("steady_state_error.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_steady_state_error_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("steady_state_error.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_steady_state_error_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("steady_state_error.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_steady_state_error_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("steady_state_error.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_steady_state_response_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("steady_state_response.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_steady_state_response_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("steady_state_response.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_steady_state_response_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("steady_state_response.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_steady_state_response_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("steady_state_response.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_stokes_theorem_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("stokes_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_stokes_theorem_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("stokes_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stokes_theorem_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("stokes_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_stokes_theorem_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("stokes_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_strassen_s_algorithm_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("strassen_s_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_strassen_s_algorithm_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("strassen_s_algorithm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_strassen_s_algorithm_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("strassen_s_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_strassen_s_algorithm_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("strassen_s_algorithm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_strong_induction_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("strong_induction.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_strong_induction_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("strong_induction.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_strong_induction_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("strong_induction.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_strong_induction_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("strong_induction.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_substitution_method_for_recurrences_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("substitution_method_for_recurrences.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_substitution_method_for_recurrences_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("substitution_method_for_recurrences.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_substitution_method_for_recurrences_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("substitution_method_for_recurrences.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_substitution_method_for_recurrences_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("substitution_method_for_recurrences.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_sum_of_random_variables_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("sum_of_random_variables.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_sum_of_random_variables_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("sum_of_random_variables.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_sum_of_random_variables_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("sum_of_random_variables.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_sum_of_random_variables_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("sum_of_random_variables.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_supersets_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("supersets.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_supersets_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("supersets.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_supersets_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("supersets.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_supersets_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("supersets.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_support_vector_machines_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("support_vector_machines.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_support_vector_machines_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("support_vector_machines.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_support_vector_machines_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("support_vector_machines.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_support_vector_machines_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("support_vector_machines.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_surjective_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("surjective.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_surjective_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("surjective.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_surjective_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("surjective.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_surjective_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("surjective.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_switching_power_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("switching_power.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_switching_power_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("switching_power.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_switching_power_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("switching_power.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_switching_power_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("switching_power.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_symmetric_difference_operator_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("symmetric_difference_operator.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_symmetric_difference_operator_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("symmetric_difference_operator.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_symmetric_difference_operator_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("symmetric_difference_operator.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_symmetric_difference_operator_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("symmetric_difference_operator.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_symmetric_encryption_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("symmetric_encryption.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_symmetric_encryption_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("symmetric_encryption.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_symmetric_encryption_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("symmetric_encryption.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_symmetric_encryption_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("symmetric_encryption.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_symmetric_matrix_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("symmetric_matrix.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_symmetric_matrix_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("symmetric_matrix.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_symmetric_matrix_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("symmetric_matrix.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_symmetric_matrix_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("symmetric_matrix.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_symmetric_relation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("symmetric_relation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_symmetric_relation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("symmetric_relation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_symmetric_relation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("symmetric_relation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_symmetric_relation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("symmetric_relation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_sympy_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("sympy.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_sympy_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("sympy.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_sympy_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("sympy.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_sympy_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("sympy.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_syntax_of_truth_functional_logic_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("syntax_of_truth_functional_logic.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_syntax_of_truth_functional_logic_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("syntax_of_truth_functional_logic.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_syntax_of_truth_functional_logic_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("syntax_of_truth_functional_logic.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_syntax_of_truth_functional_logic_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("syntax_of_truth_functional_logic.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_systemverilog_dff_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("systemverilog_dff.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_systemverilog_dff_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("systemverilog_dff.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_systemverilog_dff_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("systemverilog_dff.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_systemverilog_dff_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("systemverilog_dff.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_systemverilog_logic_vs_wire_vs_reg_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("systemverilog_logic_vs_wire_vs_reg.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_systemverilog_logic_vs_wire_vs_reg_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("systemverilog_logic_vs_wire_vs_reg.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_systemverilog_logic_vs_wire_vs_reg_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("systemverilog_logic_vs_wire_vs_reg.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_systemverilog_logic_vs_wire_vs_reg_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("systemverilog_logic_vs_wire_vs_reg.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_systemverilog_naming_conventions_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("systemverilog_naming_conventions.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_systemverilog_naming_conventions_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("systemverilog_naming_conventions.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_systemverilog_naming_conventions_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("systemverilog_naming_conventions.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_systemverilog_naming_conventions_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("systemverilog_naming_conventions.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_systemverilog_number_format_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("systemverilog_number_format.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_systemverilog_number_format_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("systemverilog_number_format.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_systemverilog_number_format_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("systemverilog_number_format.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_systemverilog_number_format_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("systemverilog_number_format.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_systemverilog_port_naming_conventions_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("systemverilog_port_naming_conventions.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_systemverilog_port_naming_conventions_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("systemverilog_port_naming_conventions.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_systemverilog_port_naming_conventions_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("systemverilog_port_naming_conventions.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_systemverilog_port_naming_conventions_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("systemverilog_port_naming_conventions.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_systemverilog_reduction_operators_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("systemverilog_reduction_operators.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_systemverilog_reduction_operators_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("systemverilog_reduction_operators.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_systemverilog_reduction_operators_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("systemverilog_reduction_operators.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_systemverilog_reduction_operators_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("systemverilog_reduction_operators.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_systemverilog_sensitivity_list_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("systemverilog_sensitivity_list.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_systemverilog_sensitivity_list_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("systemverilog_sensitivity_list.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_systemverilog_sensitivity_list_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("systemverilog_sensitivity_list.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_systemverilog_sensitivity_list_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("systemverilog_sensitivity_list.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_systemverilog_testbenches_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("systemverilog_testbenches.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_systemverilog_testbenches_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("systemverilog_testbenches.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_systemverilog_testbenches_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("systemverilog_testbenches.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_systemverilog_testbenches_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("systemverilog_testbenches.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_system_call_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("system_call.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_system_call_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("system_call.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_system_call_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("system_call.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_system_call_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("system_call.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_system_of_differential_equations_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("system_of_differential_equations.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_system_of_differential_equations_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("system_of_differential_equations.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_system_of_differential_equations_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("system_of_differential_equations.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_system_of_differential_equations_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("system_of_differential_equations.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_system_of_linear_differential_equations_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("system_of_linear_differential_equations.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_system_of_linear_differential_equations_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("system_of_linear_differential_equations.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_system_of_linear_differential_equations_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("system_of_linear_differential_equations.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_system_of_linear_differential_equations_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("system_of_linear_differential_equations.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_tangent_vector_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("tangent_vector.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_tangent_vector_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("tangent_vector.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_tangent_vector_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("tangent_vector.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_tangent_vector_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("tangent_vector.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_tar_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("tar.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_tar_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("tar.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_tar_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("tar.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_tar_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("tar.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_tautology_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("tautology.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_tautology_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("tautology.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_tautology_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("tautology.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_tautology_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("tautology.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_taylor_series_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("taylor_series.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_taylor_series_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("taylor_series.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_taylor_series_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("taylor_series.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_taylor_series_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("taylor_series.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_ternary_operator_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("ternary_operator.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_ternary_operator_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("ternary_operator.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_ternary_operator_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("ternary_operator.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_ternary_operator_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("ternary_operator.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_thevenin_equivalence_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("thevenin_equivalence.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_thevenin_equivalence_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("thevenin_equivalence.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_thevenin_equivalence_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("thevenin_equivalence.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_thevenin_equivalence_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("thevenin_equivalence.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_the_fundamental_theorem_of_arithmetic_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("the_fundamental_theorem_of_arithmetic.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_the_fundamental_theorem_of_arithmetic_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("the_fundamental_theorem_of_arithmetic.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_the_fundamental_theorem_of_arithmetic_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("the_fundamental_theorem_of_arithmetic.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_the_fundamental_theorem_of_arithmetic_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("the_fundamental_theorem_of_arithmetic.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_the_principle_of_superposition_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("the_principle_of_superposition.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_the_principle_of_superposition_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("the_principle_of_superposition.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_the_principle_of_superposition_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("the_principle_of_superposition.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_the_principle_of_superposition_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("the_principle_of_superposition.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_topological_sort_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("topological_sort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_topological_sort_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("topological_sort.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_topological_sort_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("topological_sort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_topological_sort_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("topological_sort.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_tor_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("tor.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_tor_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("tor.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_tor_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("tor.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_tor_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("tor.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_torify_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("torify.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_torify_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("torify.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_torify_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("torify.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_torify_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("torify.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_total_correctness_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("total_correctness.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_total_correctness_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("total_correctness.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_total_correctness_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("total_correctness.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_total_correctness_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("total_correctness.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_traceroute_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("traceroute.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_traceroute_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("traceroute.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_traceroute_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("traceroute.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_traceroute_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("traceroute.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_trait_bounds_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("trait_bounds.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_trait_bounds_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("trait_bounds.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_trait_bounds_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("trait_bounds.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_trait_bounds_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("trait_bounds.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_transfer_function_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("transfer_function.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_transfer_function_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("transfer_function.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_transfer_function_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("transfer_function.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_transfer_function_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("transfer_function.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_transient_circuit_analysis_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("transient_circuit_analysis.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_transient_circuit_analysis_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("transient_circuit_analysis.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_transient_circuit_analysis_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("transient_circuit_analysis.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_transient_circuit_analysis_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("transient_circuit_analysis.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_transient_response_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("transient_response.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_transient_response_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("transient_response.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_transient_response_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("transient_response.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_transient_response_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("transient_response.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_transistor_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("transistor.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_transistor_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("transistor.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_transistor_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("transistor.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_transistor_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("transistor.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_transitive_relation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("transitive_relation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_transitive_relation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("transitive_relation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_transitive_relation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("transitive_relation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_transitive_relation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("transitive_relation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_translation_unit_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("translation_unit.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_translation_unit_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("translation_unit.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_translation_unit_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("translation_unit.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_translation_unit_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("translation_unit.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_travelling_salesman_problem_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("travelling_salesman_problem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_travelling_salesman_problem_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("travelling_salesman_problem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_travelling_salesman_problem_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("travelling_salesman_problem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_travelling_salesman_problem_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("travelling_salesman_problem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_tree_data_structure_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("tree_data_structure.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_tree_data_structure_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("tree_data_structure.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_tree_data_structure_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("tree_data_structure.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_tree_data_structure_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("tree_data_structure.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_trilinear_filtering_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("trilinear_filtering.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_trilinear_filtering_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("trilinear_filtering.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_trilinear_filtering_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("trilinear_filtering.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_trilinear_filtering_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("trilinear_filtering.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_tristate_buffer_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("tristate_buffer.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_tristate_buffer_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("tristate_buffer.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_tristate_buffer_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("tristate_buffer.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_tristate_buffer_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("tristate_buffer.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_truth_functional_logic_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("truth_functional_logic.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_truth_functional_logic_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("truth_functional_logic.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_truth_functional_logic_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("truth_functional_logic.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_truth_functional_logic_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("truth_functional_logic.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_turing_machine_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("turing_machine.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_turing_machine_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("turing_machine.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_turing_machine_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("turing_machine.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_turing_machine_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("turing_machine.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_two_port_networks_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("two_port_networks.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_two_port_networks_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("two_port_networks.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_two_port_networks_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("two_port_networks.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_two_port_networks_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("two_port_networks.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_t_distribution_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("t_distribution.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_t_distribution_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("t_distribution.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_t_distribution_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("t_distribution.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_t_distribution_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("t_distribution.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_t_testing_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("t_testing.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_t_testing_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("t_testing.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_t_testing_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("t_testing.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_t_testing_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("t_testing.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_ulysses_pact_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("ulysses_pact.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_ulysses_pact_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("ulysses_pact.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_ulysses_pact_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("ulysses_pact.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_ulysses_pact_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("ulysses_pact.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_undirected_graph_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("undirected_graph.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_undirected_graph_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("undirected_graph.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_undirected_graph_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("undirected_graph.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_undirected_graph_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("undirected_graph.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_uniform_distribution_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("uniform_distribution.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_uniform_distribution_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("uniform_distribution.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_uniform_distribution_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("uniform_distribution.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_uniform_distribution_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("uniform_distribution.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_union_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("union.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_union_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("union.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_union_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("union.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_union_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("union.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_unit_binormal_vector_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("unit_binormal_vector.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_unit_binormal_vector_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("unit_binormal_vector.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_unit_binormal_vector_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("unit_binormal_vector.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_unit_binormal_vector_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("unit_binormal_vector.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_unit_normal_vector_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("unit_normal_vector.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_unit_normal_vector_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("unit_normal_vector.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_unit_normal_vector_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("unit_normal_vector.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_unit_normal_vector_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("unit_normal_vector.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_unit_tangent_vector_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("unit_tangent_vector.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_unit_tangent_vector_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("unit_tangent_vector.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_unit_tangent_vector_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("unit_tangent_vector.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_unit_tangent_vector_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("unit_tangent_vector.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_universal_hashing_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("universal_hashing.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_universal_hashing_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("universal_hashing.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_universal_hashing_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("universal_hashing.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_universal_hashing_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("universal_hashing.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_universal_relation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("universal_relation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_universal_relation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("universal_relation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_universal_relation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("universal_relation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_universal_relation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("universal_relation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_unrar_linux_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("unrar_linux.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_unrar_linux_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("unrar_linux.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_unrar_linux_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("unrar_linux.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_unrar_linux_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("unrar_linux.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_upper_confidence_bound_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("upper_confidence_bound.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_upper_confidence_bound_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("upper_confidence_bound.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_upper_confidence_bound_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("upper_confidence_bound.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_upper_confidence_bound_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("upper_confidence_bound.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_van_emde_boas_trees_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("van_emde_boas_trees.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_van_emde_boas_trees_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("van_emde_boas_trees.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_van_emde_boas_trees_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("van_emde_boas_trees.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_van_emde_boas_trees_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("van_emde_boas_trees.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_variance_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("variance.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_variance_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("variance.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_variance_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("variance.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_variance_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("variance.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_variational_calculus_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("variational_calculus.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_variational_calculus_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("variational_calculus.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_variational_calculus_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("variational_calculus.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_variational_calculus_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("variational_calculus.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_variation_of_parameters_method_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("variation_of_parameters_method.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_variation_of_parameters_method_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("variation_of_parameters_method.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_variation_of_parameters_method_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("variation_of_parameters_method.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_variation_of_parameters_method_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("variation_of_parameters_method.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_vectorized_operations_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("vectorized_operations.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_vectorized_operations_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("vectorized_operations.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_vectorized_operations_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("vectorized_operations.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_vectorized_operations_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("vectorized_operations.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_vector_field_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("vector_field.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_vector_field_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("vector_field.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_vector_field_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("vector_field.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_vector_field_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("vector_field.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_vector_space_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("vector_space.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_vector_space_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("vector_space.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_vector_space_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("vector_space.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_vector_space_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("vector_space.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_vector_valued_function_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("vector_valued_function.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_vector_valued_function_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("vector_valued_function.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_vector_valued_function_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("vector_valued_function.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_vector_valued_function_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("vector_valued_function.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_verilator_vs_vcs_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("verilator_vs_vcs.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_verilator_vs_vcs_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("verilator_vs_vcs.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_verilator_vs_vcs_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("verilator_vs_vcs.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_verilator_vs_vcs_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("verilator_vs_vcs.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_vertex_degree_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("vertex_degree.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_vertex_degree_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("vertex_degree.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_vertex_degree_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("vertex_degree.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_vertex_degree_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("vertex_degree.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_virtual_address_space_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("virtual_address_space.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_virtual_address_space_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("virtual_address_space.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_virtual_address_space_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("virtual_address_space.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_virtual_address_space_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("virtual_address_space.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_virtual_memory_drm_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("virtual_memory_drm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_virtual_memory_drm_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("virtual_memory_drm.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_virtual_memory_drm_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("virtual_memory_drm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_virtual_memory_drm_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("virtual_memory_drm.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_volatile_keyword_in_c_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("volatile_keyword_in_c.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_volatile_keyword_in_c_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("volatile_keyword_in_c.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_volatile_keyword_in_c_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("volatile_keyword_in_c.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_volatile_keyword_in_c_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("volatile_keyword_in_c.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_voltage_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("voltage.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_voltage_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("voltage.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_voltage_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("voltage.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_voltage_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("voltage.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_voltage_controlled_oscillator_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("voltage_controlled_oscillator.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_voltage_controlled_oscillator_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("voltage_controlled_oscillator.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_voltage_controlled_oscillator_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("voltage_controlled_oscillator.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_voltage_controlled_oscillator_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("voltage_controlled_oscillator.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_voronio_diagram_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("voronio_diagram.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_voronio_diagram_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("voronio_diagram.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_voronio_diagram_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("voronio_diagram.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_voronio_diagram_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("voronio_diagram.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_warrant_canary_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("warrant_canary.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_warrant_canary_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("warrant_canary.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_warrant_canary_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("warrant_canary.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_warrant_canary_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("warrant_canary.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_wavelet_transform_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("wavelet_transform.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_wavelet_transform_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("wavelet_transform.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_wavelet_transform_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("wavelet_transform.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_wavelet_transform_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("wavelet_transform.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_wave_equation_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("wave_equation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_wave_equation_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("wave_equation.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_wave_equation_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("wave_equation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_wave_equation_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("wave_equation.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_weighted_graph_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("weighted_graph.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_weighted_graph_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("weighted_graph.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_weighted_graph_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("weighted_graph.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_weighted_graph_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("weighted_graph.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_well_ordering_principle_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("well_ordering_principle.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_well_ordering_principle_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("well_ordering_principle.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_well_ordering_principle_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("well_ordering_principle.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_well_ordering_principle_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("well_ordering_principle.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_xargs_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("xargs.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_xargs_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("xargs.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_xargs_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("xargs.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_xargs_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("xargs.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_yablo_s_paradox_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("yablo_s_paradox.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_yablo_s_paradox_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("yablo_s_paradox.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_yablo_s_paradox_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("yablo_s_paradox.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_yablo_s_paradox_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("yablo_s_paradox.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_yuv_pixel_format_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("yuv_pixel_format.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_yuv_pixel_format_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("yuv_pixel_format.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_yuv_pixel_format_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("yuv_pixel_format.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_yuv_pixel_format_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("yuv_pixel_format.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_zermelo_fraenkel_set_theory_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("zermelo_fraenkel_set_theory.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_zermelo_fraenkel_set_theory_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("zermelo_fraenkel_set_theory.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_zermelo_fraenkel_set_theory_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("zermelo_fraenkel_set_theory.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_zermelo_fraenkel_set_theory_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("zermelo_fraenkel_set_theory.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_zermelo_s_theorem_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("zermelo_s_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_zermelo_s_theorem_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("zermelo_s_theorem.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_zermelo_s_theorem_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("zermelo_s_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_zermelo_s_theorem_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("zermelo_s_theorem.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_z_testing_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("z_testing.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_z_testing_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("z_testing.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_z_testing_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("z_testing.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_z_testing_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("z_testing.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}


    #[test]
	fn test_suite_stability_z_transform_clean() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let file: PathBuf = PathBuf::from("z_transform.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_stability_z_transform_linked() {
		let vault_path: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");
		let file: PathBuf = PathBuf::from("z_transform.md");
		let file_path: PathBuf = vault_path.join(file.clone());
		assert!(file_path.is_file());
		let file_contents = fs::read_to_string(file_path.clone()).unwrap();
		let md_file = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path.display()));
		let result = md_file.to_string();
		let expected = file_contents;
		assert_eq!(result, expected, "Failed on file: {}", file_path.display());
	}

	#[test]
	fn test_suite_z_transform_link() {
		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("z_transform.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean_to_linked = TEST_SUITE_REF_CLEAN_TO_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked = TEST_SUITE_REF_LINKED_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_linked.display()));

		let result = md_file_clean_to_linked.to_string();
		let expected = md_file_linked.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

	#[test]
	fn test_suite_z_transform_unlink() {

		let vault_path_clean: PathBuf = PathBuf::from("test_vaults\\reference_clean");
		let vault_path_linked: PathBuf = PathBuf::from("test_vaults\\reference_linked_noself");

		let file = PathBuf::from("z_transform.md");

		let file_path_clean: PathBuf = vault_path_clean.join(file.clone());
		let file_path_linked: PathBuf = vault_path_linked.join(file.clone());

		assert!(file_path_clean.is_file());
		assert!(file_path_linked.is_file());

		let md_file_clean = TEST_SUITE_REF_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));
		let md_file_linked_to_clean = TEST_SUITE_REF_LINKED_TO_CLEAN_VAULT.get_md_file(&file).expect(&format!("Failed to get MDFile from {}", file_path_clean.display()));

		let result = md_file_linked_to_clean.to_string();
		let expected = md_file_clean.to_string();
		assert_eq!(result, expected, "Failed on file: {}", file_path_clean.display());
	}

}
